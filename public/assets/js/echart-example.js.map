{"version":3,"sources":["utils.js","echarts-utils.js","area-pieces-chart.js","bar-line-mixed-chart.js","bar-negative-chart.js","bar-race-chart.js","bar-series-chart.js","bar-stacked-chart.js","bar-timeline-chart.js","bar-waterfall-chart.js","basic-bar-chart.js","basic-candlestick-chart.js","basic-gauge-chart.js","basic-line-chart.js","bubble-chart.js","candle-stick-mixed-chart.js","doughnut-chart.js","doughnut-rounded-chart.js","dynamic-line-chart.js","gauge-grade-chart.js","gauge-multi-ring-chart.js","gauge-multi-title-chart.js","gauge-progress-chart.js","gauge-ring-chart.js","gradient-bar-chart.js","heatmap-chart.js","heatmap-single-series-chart.js","horizontal-bar-chart.js","line-area-chart.js","line-gradient-chart.js","line-log-chart.js","line-marker-chart.js","line-race-chart.js","line-share-dataset-chart.js","map-usa.js","nested-pies-chart.js","pie-chart.js","pie-edge-align-chart.js","pie-label-align-chart.js","pie-multiple-chart.js","radar-chart.js","radar-customized-chart.js","radar-multiple-chart.js","scatter-basic-chart.js","scatter-quartet.js","scatter-single-axis-chart.js","stacked-area-chart.js","stacked-horizontal-bar-chart.js","stacked-line-chart.js","stacked-vertical-chart.js","step-line-chart.js","echarts-example.js"],"names":["docReady","fn","document","readyState","addEventListener","setTimeout","resize","window","isIterableArray","array","Array","isArray","length","camelize","str","text","replace","match","capture","toUpperCase","concat","substr","toLowerCase","getData","el","data","JSON","parse","dataset","e","hexToRgb","hexValue","hex","indexOf","substring","result","exec","m","r","g","b","parseInt","rgbaColor","color","arguments","undefined","alpha","getColor","name","dom","documentElement","getComputedStyle","getPropertyValue","trim","getColors","primary","secondary","success","info","warning","danger","light","dark","white","black","emphasis","getSubtleColors","getGrays","100","200","300","400","500","600","700","800","900","1000","1100","hasClass","className","classList","value","includes","addClass","add","removeClass","remove","getOffset","rect","getBoundingClientRect","scrollLeft","pageXOffset","scrollTop","pageYOffset","top","left","isScrolledIntoView","windowHeight","innerHeight","clientHeight","windowWidth","innerWidth","clientWidth","vertInView","height","horInView","width","breakpoints","xs","sm","md","lg","xl","xxl","getBreakpoint","breakpoint","classes","split","filter","cls","pop","getSystemTheme","matchMedia","matches","isDark","localStorage","getItem","setCookie","expire","expires","Date","setTime","getTime","cookie","toUTCString","getCookie","keyValue","settings","tinymce","theme","chart","borderColor","newChart","config","ctx","getContext","Chart","getItemFromStore","key","defaultValue","store","_unused","setItemToStore","payload","setItem","getStoreSpace","parseFloat","escape","encodeURIComponent","stringify","toFixed","getDates","startDate","endDate","interval","from","v","i","valueOf","getPastDates","duration","days","date","setDate","getDate","getRandomNumber","min","max","Math","floor","random","utils","getPosition","pos","params","size","contentSize","echartSetOption","userOptions","getDefaultOptions","themeController","body","setOption","_","merge","_ref","detail","control","tooltipFormatter","tooltipItem","forEach","seriesName","_typeof","dayjs","axisValue","isValid","format","echartsAreaPiecesChartInit","$areaPiecesChartEl","querySelector","echarts","init","tooltip","trigger","padding","backgroundColor","textStyle","borderWidth","transitionDuration","position","axisPointer","type","formatter","xAxis","boundaryGap","axisLine","lineStyle","axisTick","show","axisLabel","margin","splitLine","yAxis","visualMap","dimension","seriesIndex","pieces","gt","lt","series","smooth","symbol","markLine","label","areaStyle","grid","right","bottom","containLabel","echartsBarLineChartInit","months","$barLineChartEl","crossStyle","toolbox","feature","dataView","magicType","restore","saveAsImage","iconStyle","textFill","legend","slice","itemStyle","barBorderRadius","yAxisIndex","symbolSize","echartsBarNegativeChartInit","$barNegativeChartEl","stack","echartsBarRaceChartInit","run","$barRaceChartEl","keys","map","round","inverse","animationDuration","animationDurationUpdate","realtimeSort","fontWeight","valueAnimation","animationEasing","animationEasingUpdate","item","setInterval","echartsBarSeriesChartInit","$barSeriesChartEl","echartsBarStackedChartInit","$barStackedChartEl","xAxisData","data1","data2","data3","data4","push","emphasisStyle","shadowBlur","shadowColor","splitArea","echartsBarTimelineChartInit","dataMap","dataFormatter","$barTimelineChartEl","dataTI","obj","Object","reduce","acc","val","_objectSpread","_defineProperty","index","2005","2006","2007","2008","2009","2010","2011","dataSI","dataPI","baseOption","timeline","axisType","autoPlay","playInterval","s","getFullYear","checkpointStyle","shadowOffsetX","shadowOffsetY","controlStyle","title","calculable","options","echartsWaterFallChartInit","$waterfallChartEl","tar","barBorderColor","echartsBasicBarChartInit","$barChartEl","showSymbol","hoverAnimation","echartsBasicCandlestickChartInit","$basicCandleStickChartEl","dataZoom","start","end","minValueSpan","scale","splitNumber","color0","borderColor0","echartsBasicGaugeChartInit","$basicGaugeChartEl","radius","echartsLineChartInit","$lineChartEl","echartsBubbleChartInit","$bubbleChartEl","sqrt","focus","param","echartsCandlestickMixedChartInit","colorList","dates","dataMA5","$candleStickMixedChartEl","dayCount","sum","j","animation","elRect","viewSize","link","xAxisIndex","realtime","handleIcon","handleSize","gridIndex","triggerTooltip","echartsDoughnutChartInit","$doughnutChartEl","center","avoidLabelOverlap","labelLine","echartsDoughnutRoundedChartInit","$doughnutRoundedChartEl","orient","borderRadius","echartsDynamicLineChartInit","$dynamicLineChartEl","now","randomData","toString","getMonth","join","shift","echartsGaugeGradeChartInit","$gaugeGradeChartEl","startAngle","endAngle","pointer","icon","offsetCenter","distance","echartsGaugeMultiRingChartInit","$gaugeMultiRingChartEl","progress","overlap","roundCap","clip","echartsGaugeMultiTitleChartInit","$gaugeMultiTitleChartEl","anchor","showAbove","fontSize","echartsGaugeProgressChartInit","$gaugeProgressChartEl","echartsGaugeRingChartInit","$gaugeRingChartEl","echartsGradientBarChartInit","dataAxis","$gradientBarChartEl","inside","z","showBackground","graphic","LinearGradient","offset","on","dispatchAction","startValue","dataIndex","zoomSize","endValue","echartsHeatMapChartInit","$echartHeatmapChart","hours","inRange","echartsHeatMapSingleSeriesChartInit","gradientColor","echartsHorizontalBarChartInit","$horizontalBarChartEl","echartsLineAreaChartInit","$lineAreaChartEl","x","y","x2","y2","colorStops","echartsLineGradientChartInit","dateList","valueList","$lineGradientChartEl","echartsLineLogChartInit","$lineLogChartEl","echartsLineMarkerChartInit","$lineMarkerChartEl","markPoint","echartsLineRaceChartInit","$lineRaceChartEl","echartsLineShareDatasetChartInit","$lineShareChartEl","showContent","source","seriesLayoutBy","id","encode","itemName","event","xAxisInfo","axesInfo","echartsUsaMapInit","$usaMapEl","zoom","roam","scaleLimit","areaColor","echartsNestedPiesChartInit","marketingExpenses","detailedExpenses","initChart","$echartsNestedPies","rich","per","selectedMode","barWidth","lineHeight","removeEventListener","echartsPieChartInit","$pieChartEl","echartsPieEdgeAlignChartInit","$echartPieAEdgeAlignChartEl","subtext","textAlign","subtextStyle","alignTo","echartsPieLabelAlignChartInit","$echartPieLabelAlignChartEl","bleedMargin","defaultRadius","smallRadius","echartsPieMultipleChartInit","$echartPieMultipleChartEl","echartsRadarChartInit","$radarChartEl","radar","indicator","echartsRadarCustomizedChartInit","getFormatter","indicators","num","shape","radarIndex","echartsRadarMultipleChartInit","getCenter","month","echartsScatterBasicChartInit","$basicScatterChartEl","echartsScatterQuartetChartInit","dataAll","markLineOpt","gridMdUp","gridMdDown","$scatterQuartetChartEl","align","coord","echartsScatterSingleAxisChartInit","$scatterSingleAxisChartEl","animationDelay","idx","echartsStackedAreaChartInit","$stackedAreaChartEl","echartsHorizontalStackedChartInit","$horizontalStackChartEl","echartsStackedLineChartInit","$stackedLineChartEl","echartsStackedVerticalChartInit","$stackedVerticalChart","echartsStepLineChartInit","$stepLineChartEl","step"],"mappings":"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","file":"echart-example.js","sourcesContent":["/* -------------------------------------------------------------------------- */\n/*                                    Utils                                   */\n/* -------------------------------------------------------------------------- */\nconst docReady = fn => {\n  // see if DOM is already available\n  if (document.readyState === 'loading') {\n    document.addEventListener('DOMContentLoaded', fn);\n  } else {\n    setTimeout(fn, 1);\n  }\n};\n\nconst resize = fn => window.addEventListener('resize', fn);\n\nconst isIterableArray = array => Array.isArray(array) && !!array.length;\n\nconst camelize = str => {\n  const text = str.replace(/[-_\\s.]+(.)?/g, (match, capture) => {\n    if (capture) {\n      return capture.toUpperCase();\n    }\n    return '';\n  });\n  return `${text.substr(0, 1).toLowerCase()}${text.substr(1)}`;\n};\n\nconst getData = (el, data) => {\n  try {\n    return JSON.parse(el.dataset[camelize(data)]);\n  } catch (e) {\n    return el.dataset[camelize(data)];\n  }\n};\n\n/* ----------------------------- Colors function ---------------------------- */\n\nconst hexToRgb = hexValue => {\n  let hex;\n  hexValue.indexOf('#') === 0 ? (hex = hexValue.substring(1)) : (hex = hexValue);\n  // Expand shorthand form (e.g. \"03F\") to full form (e.g. \"0033FF\")\n  const shorthandRegex = /^#?([a-f\\d])([a-f\\d])([a-f\\d])$/i;\n  const result = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(\n    hex.replace(shorthandRegex, (m, r, g, b) => r + r + g + g + b + b)\n  );\n  return result\n    ? [parseInt(result[1], 16), parseInt(result[2], 16), parseInt(result[3], 16)]\n    : null;\n};\n\nconst rgbaColor = (color = '#fff', alpha = 0.5) => `rgba(${hexToRgb(color)}, ${alpha})`;\n\n/* --------------------------------- Colors --------------------------------- */\n\nconst getColor = (name, dom = document.documentElement) =>\n  getComputedStyle(dom).getPropertyValue(`--falcon-${name}`).trim();\n\nconst getColors = dom => ({\n  primary: getColor('primary', dom),\n  secondary: getColor('secondary', dom),\n  success: getColor('success', dom),\n  info: getColor('info', dom),\n  warning: getColor('warning', dom),\n  danger: getColor('danger', dom),\n  light: getColor('light', dom),\n  dark: getColor('dark', dom),\n  white: getColor('white', dom),\n  black: getColor('black', dom),\n  emphasis: getColor('emphasis-color', dom)\n});\n\nconst getSubtleColors = dom => ({\n  primary: getColor('primary-bg-subtle', dom),\n  secondary: getColor('secondary-bg-subtle', dom),\n  success: getColor('success-bg-subtle', dom),\n  info: getColor('info-bg-subtle', dom),\n  warning: getColor('warning-bg-subtle', dom),\n  danger: getColor('danger-bg-subtle', dom),\n  light: getColor('light-bg-subtle', dom),\n  dark: getColor('dark-bg-subtle', dom)\n});\n\nconst getGrays = dom => ({\n  100: getColor('gray-100', dom),\n  200: getColor('gray-200', dom),\n  300: getColor('gray-300', dom),\n  400: getColor('gray-400', dom),\n  500: getColor('gray-500', dom),\n  600: getColor('gray-600', dom),\n  700: getColor('gray-700', dom),\n  800: getColor('gray-800', dom),\n  900: getColor('gray-900', dom),\n  1000: getColor('gray-1000', dom),\n  1100: getColor('gray-1100', dom)\n});\n\nconst hasClass = (el, className) => {\n  !el && false;\n  return el.classList.value.includes(className);\n};\n\nconst addClass = (el, className) => {\n  el.classList.add(className);\n};\n\nconst removeClass = (el, className) => {\n  el.classList.remove(className);\n};\n\nconst getOffset = el => {\n  const rect = el.getBoundingClientRect();\n  const scrollLeft = window.pageXOffset || document.documentElement.scrollLeft;\n  const scrollTop = window.pageYOffset || document.documentElement.scrollTop;\n  return { top: rect.top + scrollTop, left: rect.left + scrollLeft };\n};\n\nfunction isScrolledIntoView(el) {\n  const rect = el.getBoundingClientRect();\n  const windowHeight = window.innerHeight || document.documentElement.clientHeight;\n  const windowWidth = window.innerWidth || document.documentElement.clientWidth;\n\n  const vertInView = rect.top <= windowHeight && rect.top + rect.height >= 0;\n  const horInView = rect.left <= windowWidth && rect.left + rect.width >= 0;\n\n  return vertInView && horInView;\n}\n\nconst breakpoints = {\n  xs: 0,\n  sm: 576,\n  md: 768,\n  lg: 992,\n  xl: 1200,\n  xxl: 1540\n};\n\nconst getBreakpoint = el => {\n  const classes = el && el.classList.value;\n  let breakpoint;\n  if (classes) {\n    breakpoint =\n      breakpoints[\n        classes\n          .split(' ')\n          .filter(cls => cls.includes('navbar-expand-'))\n          .pop()\n          .split('-')\n          .pop()\n      ];\n  }\n  return breakpoint;\n};\n\nconst getSystemTheme = () => (window.matchMedia('(prefers-color-scheme: dark)').matches ? 'dark' : 'light');\n\nconst isDark = () => (localStorage.getItem('theme') === 'auto' ? getSystemTheme() : localStorage.getItem('theme'));\n/* --------------------------------- Cookie --------------------------------- */\n\nconst setCookie = (name, value, expire) => {\n  const expires = new Date();\n  expires.setTime(expires.getTime() + expire);\n  document.cookie = `${name}=${value};expires=${expires.toUTCString()}`;\n};\n\nconst getCookie = name => {\n  const keyValue = document.cookie.match(`(^|;) ?${name}=([^;]*)(;|$)`);\n  return keyValue ? keyValue[2] : keyValue;\n};\n\nconst settings = {\n  tinymce: {\n    theme: 'oxide'\n  },\n  chart: {\n    borderColor: 'rgba(255, 255, 255, 0.8)'\n  }\n};\n\n/* -------------------------- Chart Initialization -------------------------- */\n\nconst newChart = (chart, config) => {\n  const ctx = chart.getContext('2d');\n  return new window.Chart(ctx, config);\n};\n\n/* ---------------------------------- Store --------------------------------- */\n\nconst getItemFromStore = (key, defaultValue, store = localStorage) => {\n  try {\n    return JSON.parse(store.getItem(key)) || defaultValue;\n  } catch {\n    return store.getItem(key) || defaultValue;\n  }\n};\n\nconst setItemToStore = (key, payload, store = localStorage) => store.setItem(key, payload);\nconst getStoreSpace = (store = localStorage) =>\n  parseFloat((escape(encodeURIComponent(JSON.stringify(store))).length / (1024 * 1024)).toFixed(2));\n\n/* get Dates between */\n\nconst getDates = (startDate, endDate, interval = 1000 * 60 * 60 * 24) => {\n  const duration = endDate - startDate;\n  const steps = duration / interval;\n  return Array.from({ length: steps + 1 }, (v, i) => new Date(startDate.valueOf() + interval * i));\n};\n\nconst getPastDates = duration => {\n  let days;\n\n  switch (duration) {\n    case 'week':\n      days = 7;\n      break;\n    case 'month':\n      days = 30;\n      break;\n    case 'year':\n      days = 365;\n      break;\n\n    default:\n      days = duration;\n  }\n\n  const date = new Date();\n  const endDate = date;\n  const startDate = new Date(new Date().setDate(date.getDate() - (days - 1)));\n  return getDates(startDate, endDate);\n};\n\n/* Get Random Number */\nconst getRandomNumber = (min, max) => Math.floor(Math.random() * (max - min) + min);\n\nconst utils = {\n  docReady,\n  breakpoints,\n  resize,\n  isIterableArray,\n  camelize,\n  getData,\n  hasClass,\n  addClass,\n  hexToRgb,\n  rgbaColor,\n  getColor,\n  getColors,\n  getSubtleColors,\n  getGrays,\n  getOffset,\n  isScrolledIntoView,\n  getBreakpoint,\n  setCookie,\n  getCookie,\n  newChart,\n  settings,\n  getItemFromStore,\n  setItemToStore,\n  getStoreSpace,\n  getDates,\n  getPastDates,\n  getRandomNumber,\n  removeClass,\n  getSystemTheme,\n  isDark\n};\n\nexport default utils;\n","const getPosition = (pos, params, dom, rect, size) => ({\n  top: pos[1] - size.contentSize[1] - 10,\n  left: pos[0] - size.contentSize[0] / 2\n});\n\nconst echartSetOption = (chart, userOptions, getDefaultOptions) => {\n  const themeController = document.body;\n  // Merge user options with lodash\n  chart.setOption(window._.merge(getDefaultOptions(), userOptions));\n\n  themeController.addEventListener('clickControl', ({ detail: { control } }) => {\n    if (control === 'theme') {\n      chart.setOption(window._.merge(getDefaultOptions(), userOptions));\n    }\n  });\n};\n\nconst tooltipFormatter = params => {\n  let tooltipItem = '';\n  params.forEach(el => {\n    tooltipItem += `<div class='ms-1'>\n        <h6 class=\"text-700\">\n          <span class=\"fas fa-circle me-1 fs-11\" style=\"color:${el.borderColor ? el.borderColor : el.color}\"></span>\n          ${el.seriesName} : ${typeof el.value === 'object' ? el.value[1] : el.value}\n        </h6>\n      </div>`;\n  });\n  return `\n    <div>\n      <p class='mb-2 text-600'>\n        ${window.dayjs(params[0].axisValue).isValid() ? window.dayjs(params[0].axisValue).format('MMMM DD') : params[0].axisValue}\n      </p>\n      ${tooltipItem}\n    </div>`;\n};\n\nexport default { getPosition, echartSetOption, tooltipFormatter };\n","import utils from '../../../utils';\nimport { getPosition, echartSetOption, tooltipFormatter } from '../echarts-utils';\n\n/* -------------------------------------------------------------------------- */\n/*                      Echarts Area Pieces Chart                             */\n/* -------------------------------------------------------------------------- */\n\nconst echartsAreaPiecesChartInit = () => {\n  const $areaPiecesChartEl = document.querySelector('.echart-area-pieces-chart-example');\n\n  if ($areaPiecesChartEl) {\n    // Get options from data attribute\n    const userOptions = utils.getData($areaPiecesChartEl, 'options');\n    const chart = window.echarts.init($areaPiecesChartEl);\n\n    const getDefaultOptions = () => ({\n      tooltip: {\n        trigger: 'axis',\n        padding: [7, 10],\n        backgroundColor: utils.getGrays()['100'],\n        borderColor: utils.getGrays()['300'],\n        textStyle: { color: utils.getGrays()['1100'] },\n        borderWidth: 1,\n        transitionDuration: 0,\n        position(pos, params, dom, rect, size) {\n          return getPosition(pos, params, dom, rect, size);\n        },\n        axisPointer: {\n          type: 'none'\n        },\n        formatter: tooltipFormatter\n      },\n      xAxis: {\n        type: 'category',\n        boundaryGap: false,\n        axisLine: {\n          lineStyle: {\n            color: utils.getGrays()['300'],\n            type: 'solid'\n          }\n        },\n        axisTick: { show: false },\n        axisLabel: {\n          color: utils.getGrays()['400'],\n          margin: 15,\n          formatter: value => window.dayjs(value).format('MMM DD')\n        },\n        splitLine: {\n          show: false\n        }\n      },\n      yAxis: {\n        type: 'value',\n        splitLine: {\n          lineStyle: {\n            color: utils.getGrays()['200']\n          }\n        },\n        boundaryGap: false,\n        axisLabel: {\n          show: true,\n          color: utils.getGrays()['400'],\n          margin: 15\n        },\n        axisTick: { show: false },\n        axisLine: { show: false }\n      },\n      visualMap: {\n        type: 'piecewise',\n        show: false,\n        dimension: 0,\n        seriesIndex: 0,\n        pieces: [\n          {\n            gt: 1,\n            lt: 3,\n            color: utils.rgbaColor(utils.getColor('primary'), 0.4)\n          },\n          {\n            gt: 5,\n            lt: 7,\n            color: utils.rgbaColor(utils.getColor('primary'), 0.4)\n          }\n        ]\n      },\n      series: [\n        {\n          type: 'line',\n          name: 'Total',\n          smooth: 0.6,\n          symbol: 'none',\n          lineStyle: {\n            color: utils.getColor('primary'),\n            width: 5\n          },\n          markLine: {\n            symbol: ['none', 'none'],\n            label: { show: false },\n            data: [{ xAxis: 1 }, { xAxis: 3 }, { xAxis: 5 }, { xAxis: 7 }]\n          },\n          areaStyle: {},\n          data: [\n            ['2019-10-10', 200],\n            ['2019-10-11', 560],\n            ['2019-10-12', 750],\n            ['2019-10-13', 580],\n            ['2019-10-14', 250],\n            ['2019-10-15', 300],\n            ['2019-10-16', 450],\n            ['2019-10-17', 300],\n            ['2019-10-18', 100]\n          ]\n        }\n      ],\n      grid: { right: 20, left: 5, bottom: 5, top: 8, containLabel: true }\n    });\n\n    echartSetOption(chart, userOptions, getDefaultOptions);\n  }\n};\n\nexport default echartsAreaPiecesChartInit;\n","import utils from '../../../utils';\nimport { echartSetOption, tooltipFormatter } from '../echarts-utils';\n\n/* -------------------------------------------------------------------------- */\n/*                             Echarts Bar Chart                             */\n/* -------------------------------------------------------------------------- */\n\nconst echartsBarLineChartInit = () => {\n  const $barLineChartEl = document.querySelector('.echart-bar-line-chart-example');\n\n  if ($barLineChartEl) {\n    // Get options from data attribute\n    const userOptions = utils.getData($barLineChartEl, 'options');\n    const chart = window.echarts.init($barLineChartEl);\n\n    const months = [\n      'January',\n      'February',\n      'March',\n      'April',\n      'May',\n      'June',\n      'July',\n      'August',\n      'September',\n      'October',\n      'November',\n      'December'\n    ];\n\n    const getDefaultOptions = () => ({\n      tooltip: {\n        trigger: 'axis',\n        axisPointer: {\n          type: 'cross',\n          crossStyle: {\n            color: utils.getGrays()['500']\n          },\n          label: {\n            show: true,\n            backgroundColor: utils.getGrays()['600'],\n            color: utils.getGrays()['100']\n          }\n        },\n        padding: [7, 10],\n        backgroundColor: utils.getGrays()['100'],\n        borderColor: utils.getGrays()['300'],\n        textStyle: { color: utils.getGrays()['1100'] },\n        borderWidth: 1,\n        transitionDuration: 0,\n        formatter: tooltipFormatter\n      },\n      toolbox: {\n        top: 0,\n        feature: {\n          dataView: { show: false },\n          magicType: {\n            show: true,\n            type: ['line', 'bar']\n          },\n          restore: { show: true },\n          saveAsImage: { show: true }\n        },\n        iconStyle: {\n          borderColor: utils.getGrays()['700'],\n          borderWidth: 1\n        },\n\n        emphasis: {\n          iconStyle: {\n            textFill: utils.getGrays()['600']\n          }\n        }\n      },\n      legend: {\n        top: 40,\n        data: ['Evaporation', 'Precipitation', 'Average temperature'],\n        textStyle: {\n          color: utils.getGrays()['600']\n        }\n      },\n      xAxis: [\n        {\n          type: 'category',\n          data: months,\n          axisLabel: {\n            color: utils.getGrays()['600'],\n            formatter: value => value.slice(0, 3)\n          },\n          axisPointer: {\n            type: 'shadow'\n          },\n          axisLine: {\n            show: true,\n            lineStyle: {\n              color: utils.getGrays()['300']\n            }\n          }\n        }\n      ],\n      yAxis: [\n        {\n          type: 'value',\n          min: 0,\n          max: 250,\n          interval: 50,\n          axisLabel: {\n            color: utils.getGrays()['600'],\n            formatter: '{value} ml'\n          },\n          splitLine: {\n            show: true,\n            lineStyle: {\n              color: utils.getGrays()['200']\n            }\n          }\n        },\n        {\n          type: 'value',\n          min: 0,\n          max: 25,\n          interval: 5,\n          axisLabel: {\n            color: utils.getGrays()['600'],\n            formatter: '{value} °C'\n          },\n\n          splitLine: {\n            show: true,\n            lineStyle: {\n              color: utils.getGrays()['200']\n            }\n          }\n        }\n      ],\n      series: [\n        {\n          name: 'Evaporation',\n          type: 'bar',\n          data: [2.0, 4.9, 7.0, 23.2, 25.6, 76.7, 135.6, 162.2, 32.6, 20.0, 6.4, 3.3],\n          itemStyle: {\n            color: utils.getColor('primary'),\n            barBorderRadius: [3, 3, 0, 0]\n          }\n        },\n        {\n          name: 'Precipitation',\n          type: 'bar',\n          data: [2.6, 5.9, 9.0, 26.4, 28.7, 70.7, 175.6, 182.2, 48.7, 18.8, 6.0, 2.3],\n          itemStyle: {\n            color: utils.getColor('info'),\n            barBorderRadius: [3, 3, 0, 0]\n          }\n        },\n        {\n          name: 'Average temperature',\n          type: 'line',\n          yAxisIndex: 1,\n          data: [2.0, 2.2, 3.3, 4.5, 6.3, 10.2, 20.3, 23.4, 23.0, 16.5, 12.0, 6.2],\n          lineStyle: {\n            color: utils.getColor('warning')\n          },\n          itemStyle: {\n            color: utils.getGrays()['100'],\n            borderColor: utils.getColor('warning'),\n            borderWidth: 2\n          },\n          symbol: 'circle',\n          symbolSize: 10\n        }\n      ],\n      grid: {\n        right: 5,\n        left: 5,\n        bottom: 5,\n        top: '23%',\n        containLabel: true\n      }\n    });\n\n    echartSetOption(chart, userOptions, getDefaultOptions);\n  }\n};\n\nexport default echartsBarLineChartInit;\n","import utils from '../../../utils';\nimport { echartSetOption, tooltipFormatter } from '../echarts-utils';\n\n/* -------------------------------------------------------------------------- */\n/*                             Echarts Bar Chart                             */\n/* -------------------------------------------------------------------------- */\n\nconst echartsBarNegativeChartInit = () => {\n  const $barNegativeChartEl = document.querySelector('.echart-bar-chart-negative-example');\n\n  if ($barNegativeChartEl) {\n    // Get options from data attribute\n    const userOptions = utils.getData($barNegativeChartEl, 'options');\n    const chart = window.echarts.init($barNegativeChartEl);\n\n    const getDefaultOptions = () => ({\n      tooltip: {\n        trigger: 'axis',\n        axisPointer: {\n          type: 'shadow'\n        },\n        padding: [7, 10],\n        backgroundColor: utils.getGrays()['100'],\n        borderColor: utils.getGrays()['300'],\n        textStyle: { color: utils.getGrays()['1100'] },\n        borderWidth: 1,\n        transitionDuration: 0,\n        formatter: tooltipFormatter\n      },\n      grid: {\n        top: 5,\n        bottom: 5,\n        left: 5,\n        right: 5\n      },\n      xAxis: {\n        type: 'value',\n        position: 'top',\n        splitLine: {\n          lineStyle: {\n            type: 'dashed',\n            color: utils.getGrays()['200']\n          }\n        }\n      },\n      yAxis: {\n        type: 'category',\n        axisLine: { show: false },\n        axisLabel: { show: false },\n        axisTick: { show: false },\n        splitLine: { show: false },\n        data: ['Ten', 'Nine', 'Eight', 'Seven', 'Six', 'Five', 'Four', 'Three', 'Two', 'One']\n      },\n      series: [\n        {\n          name: 'Cost',\n          type: 'bar',\n          stack: 'total',\n          label: {\n            show: true,\n            formatter: '{b}',\n            color: '#fff'\n          },\n          itemStyle: {\n            color: utils.getColor('primary')\n          },\n          data: [-0.12, -0.19, 0.2, 0.44, -0.23, 0.08, -0.17, 0.47, -0.36, 0.18]\n        }\n      ]\n    });\n\n    echartSetOption(chart, userOptions, getDefaultOptions);\n  }\n};\n\nexport default echartsBarNegativeChartInit;\n","import utils from '../../../utils';\nimport { echartSetOption } from '../echarts-utils';\n\n/* -------------------------------------------------------------------------- */\n/*                         Echarts Bar Race Chart                             */\n/* -------------------------------------------------------------------------- */\n\nconst echartsBarRaceChartInit = () => {\n  const $barRaceChartEl = document.querySelector('.echart-bar-race-chart-example');\n\n  if ($barRaceChartEl) {\n    // Get options from data attribute\n    const userOptions = utils.getData($barRaceChartEl, 'options');\n    const chart = window.echarts.init($barRaceChartEl);\n\n    let data = Array.from(Array(7).keys()).map(() => Math.round(Math.random() * 200));\n\n    const getDefaultOptions = () => ({\n      xAxis: {\n        max: 'dataMax',\n        splitLine: {\n          lineStyle: {\n            color: utils.getGrays()['200']\n          }\n        },\n        axisLabel: {\n          color: utils.getGrays()['500']\n        }\n      },\n      yAxis: {\n        type: 'category',\n        data: ['A', 'B', 'C', 'D', 'E', 'F', 'G'],\n        inverse: true,\n        axisLabel: {\n          color: utils.getGrays()['500']\n        },\n        axisLine: {\n          show: true,\n          lineStyle: {\n            color: utils.getGrays()['300']\n          }\n        },\n        axisTick: {\n          show: false\n        },\n        animationDuration: 300,\n        animationDurationUpdate: 300,\n        max: 4 // only the largest 5 bars will be displayed\n      },\n      series: [\n        {\n          realtimeSort: true,\n          name: 'X',\n          type: 'bar',\n          data,\n          label: {\n            show: true,\n            position: 'right',\n            color: utils.getGrays()['700'],\n            fontWeight: 500,\n            valueAnimation: true\n          },\n          itemStyle: {\n            color: utils.getColor('primary'),\n            barBorderRadius: [0, 3, 3, 0]\n          }\n        }\n      ],\n      animationDuration: 0,\n      animationDurationUpdate: 3000,\n      animationEasing: 'linear',\n      animationEasingUpdate: 'linear',\n      grid: {\n        right: '10%',\n        left: 5,\n        bottom: 5,\n        top: 5,\n        containLabel: true\n      }\n    });\n\n    echartSetOption(chart, userOptions, getDefaultOptions);\n\n    const run = () => {\n      data = data.map(item =>\n        (Math.random() > 0.9\n          ? item + Math.round(Math.random() * 2000)\n          : item + Math.round(Math.random() * 200)\n        ));\n\n      chart.setOption({\n        series: [\n          {\n            data\n          }\n        ]\n      });\n    };\n\n    setTimeout(() => {\n      run();\n    }, 0);\n    setInterval(() => {\n      run();\n    }, 3000);\n  }\n};\n\nexport default echartsBarRaceChartInit;\n","import utils from '../../../utils';\nimport { echartSetOption, tooltipFormatter } from '../echarts-utils';\n\n/* -------------------------------------------------------------------------- */\n/*                             Echarts Bar Chart                             */\n/* -------------------------------------------------------------------------- */\n\nconst echartsBarSeriesChartInit = () => {\n  const $barSeriesChartEl = document.querySelector('.echart-bar-chart-series-example');\n\n  if ($barSeriesChartEl) {\n    // Get options from data attribute\n    const userOptions = utils.getData($barSeriesChartEl, 'options');\n    const chart = window.echarts.init($barSeriesChartEl);\n\n    const getDefaultOptions = () => ({\n      color: [utils.getColor('primary'), utils.getColor('info')],\n      tooltip: {\n        trigger: 'axis',\n        axisPointer: {\n          type: 'shadow'\n        },\n        padding: [7, 10],\n        backgroundColor: utils.getGrays()['100'],\n        borderColor: utils.getGrays()['300'],\n        textStyle: { color: utils.getGrays()['1100'] },\n        borderWidth: 1,\n        transitionDuration: 0,\n        formatter: tooltipFormatter\n      },\n      xAxis: {\n        type: 'value',\n        axisLabel: {\n          formatter: value => `${value / 1000}k`,\n          color: utils.getGrays()['500']\n        },\n        axisLine: {\n          show: true,\n          lineStyle: {\n            color: utils.getGrays()['300'],\n            type: 'solid'\n          }\n        },\n        splitLine: {\n          lineStyle: {\n            type: 'dashed',\n            color: utils.getGrays()['200']\n          }\n        }\n      },\n      yAxis: {\n        type: 'category',\n        axisLine: {\n          show: true,\n          lineStyle: {\n            color: utils.getGrays()['300'],\n            type: 'solid'\n          }\n        },\n        axisLabel: {\n          color: utils.getGrays()['500']\n        },\n        axisTick: { show: false },\n        splitLine: { show: false },\n        data: ['Brazil', 'Indonesia', 'USA', 'India', 'China']\n      },\n      series: [\n        {\n          name: '2011',\n          type: 'bar',\n          data: [18203, 23489, 29034, 104970, 131744],\n          itemStyle: {\n            barBorderRadius: [0, 3, 3, 0]\n          }\n        },\n        {\n          name: '2012',\n          type: 'bar',\n          data: [19325, 23438, 31000, 121594, 134141],\n          itemStyle: {\n            barBorderRadius: [0, 3, 3, 0]\n          }\n        }\n      ],\n      grid: { right: 15, left: '12%', bottom: '10%', top: 5 }\n    });\n\n    echartSetOption(chart, userOptions, getDefaultOptions);\n  }\n};\n\nexport default echartsBarSeriesChartInit;\n","import utils from '../../../utils';\nimport { echartSetOption } from '../echarts-utils';\n\n/* -------------------------------------------------------------------------- */\n/*                             Echarts Bar Chart                             */\n/* -------------------------------------------------------------------------- */\n\nconst echartsBarStackedChartInit = () => {\n  const $barStackedChartEl = document.querySelector('.echart-bar-stacked-chart-example');\n\n  if ($barStackedChartEl) {\n    // Get options from data attribute\n    const userOptions = utils.getData($barStackedChartEl, 'options');\n    const chart = window.echarts.init($barStackedChartEl);\n\n    const xAxisData = [];\n    const data1 = [];\n    const data2 = [];\n    const data3 = [];\n    const data4 = [];\n\n    for (let i = 0; i < 10; i += 1) {\n      xAxisData.push(`Class${i + 1}`);\n      data1.push((Math.random() * 2).toFixed(2));\n      data2.push((Math.random() * 5).toFixed(2));\n      data3.push((Math.random() + 0.3).toFixed(2));\n      data4.push(-Math.random().toFixed(2));\n    }\n\n    const emphasisStyle = {\n      itemStyle: {\n        shadowBlur: 10,\n        shadowColor: utils.rgbaColor(utils.getColor('dark'), 0.3)\n      }\n    };\n\n    const getDefaultOptions = () => ({\n      color: [\n        utils.getColor('primary'),\n        utils.getColor('info'),\n        utils.getColor('warning'),\n        utils.getColor('danger')\n      ],\n      legend: {\n        data: ['Bar1', 'Bar2', 'Bar3', 'Bar4'],\n        textStyle: {\n          color: utils.getGrays()['700']\n        },\n        left: 0\n      },\n      toolbox: {\n        feature: {\n          magicType: {\n            type: ['stack', 'tiled']\n          }\n        },\n        iconStyle: {\n          borderColor: utils.getGrays()['700'],\n          borderWidth: 1\n        }\n      },\n      tooltip: {\n        trigger: 'item',\n        padding: [7, 10],\n        backgroundColor: utils.getGrays()['100'],\n        borderColor: utils.getGrays()['300'],\n        borderWidth: 1,\n        transitionDuration: 0,\n        axisPointer: {\n          type: 'none'\n        }\n      },\n      xAxis: {\n        data: xAxisData,\n        splitLine: { show: false },\n        splitArea: { show: false },\n\n        axisLabel: {\n          color: utils.getGrays()['600']\n        },\n\n        axisLine: {\n          lineStyle: {\n            color: utils.getGrays()['400']\n          }\n        }\n      },\n      yAxis: {\n        splitLine: {\n          lineStyle: {\n            color: utils.getGrays()['200']\n          }\n        },\n        axisLabel: {\n          color: utils.getGrays()['600']\n        }\n      },\n      series: [\n        {\n          name: 'Bar1',\n          type: 'bar',\n          stack: 'one',\n          emphasis: emphasisStyle,\n          data: data1\n        },\n        {\n          name: 'Bar2',\n          type: 'bar',\n          stack: 'one',\n          emphasis: emphasisStyle,\n          data: data2\n        },\n        {\n          name: 'Bar3',\n          type: 'bar',\n          stack: 'two',\n          emphasis: emphasisStyle,\n          data: data3\n        },\n        {\n          name: 'Bar4',\n          type: 'bar',\n          stack: 'two',\n          emphasis: emphasisStyle,\n          data: data4\n        }\n      ],\n      grid: {\n        top: '10%',\n        bottom: 10,\n        left: 5,\n        right: 7,\n        containLabel: true\n      }\n    });\n\n    echartSetOption(chart, userOptions, getDefaultOptions);\n  }\n};\n\nexport default echartsBarStackedChartInit;\n","import utils from '../../../utils';\nimport { echartSetOption, tooltipFormatter } from '../echarts-utils';\n\n/* -------------------------------------------------------------------------- */\n/*                         Echarts Bar Timeline Chart                         */\n/* -------------------------------------------------------------------------- */\n\nconst echartsBarTimelineChartInit = () => {\n  const $barTimelineChartEl = document.querySelector('.echart-bar-timeline-chart-example');\n\n  if ($barTimelineChartEl) {\n    // Get options from data attribute\n    const userOptions = utils.getData($barTimelineChartEl, 'options');\n    const chart = window.echarts.init($barTimelineChartEl);\n\n    const months = [\n      'January',\n      'February',\n      'March',\n      'April',\n      'May',\n      'June',\n      'July',\n      'August',\n      'September',\n      'October',\n      'November',\n      'December'\n    ];\n\n    const dataMap = {};\n\n    const dataFormatter = obj =>\n      Object.keys(obj).reduce(\n        (acc, val) => ({\n          ...acc,\n          [val]: obj[val].map((value, index) => ({\n            name: months[index],\n            value\n          }))\n        }),\n        {}\n      );\n\n    dataMap.dataTI = dataFormatter({\n      2005: [\n        88.68, 112.38, 1400, 262.42, 589.56, 882.41, 625.61, 684.6, 90.26, 1461.51, 892.83, 966.5\n      ],\n      2006: [\n        88.8, 103.35, 1461.81, 276.77, 634.94, 939.43, 672.76, 750.14, 93.81, 1545.05, 925.1,\n        1011.03\n      ],\n      2007: [\n        101.26, 110.19, 1804.72, 311.97, 762.1, 1133.42, 783.8, 915.38, 101.84, 1816.31, 986.02,\n        1200.18\n      ],\n      2008: [\n        112.83, 122.58, 2034.59, 313.58, 907.95, 1302.02, 916.72, 1088.94, 111.8, 2100.11, 1095.96,\n        1418.09\n      ],\n      2009: [\n        118.29, 128.85, 2207.34, 477.59, 929.6, 1414.9, 980.57, 1154.33, 113.82, 2261.86, 1163.08,\n        1495.45\n      ],\n      2010: [\n        124.36, 145.58, 2562.81, 554.48, 1095.28, 1631.08, 1050.15, 1302.9, 114.15, 2540.1, 1360.56,\n        1729.02\n      ],\n      2011: [\n        136.27, 159.72, 2905.73, 641.42, 1306.3, 1915.57, 1277.44, 1701.5, 124.94, 3064.78, 1583.04,\n        2015.31\n      ]\n    });\n\n    dataMap.dataSI = dataFormatter({\n      2005: [\n        2026.51, 2135.07, 5271.57, 2357.04, 1773.21, 3869.4, 1580.83, 2971.68, 4381.2, 10524.96,\n        7164.75, 2245.9\n      ],\n      2006: [\n        2191.43, 2457.08, 6110.43, 2755.66, 2374.96, 4566.83, 1915.29, 3365.31, 4969.95, 12282.89,\n        8511.51, 2711.18\n      ],\n      2007: [\n        2509.4, 2892.53, 7201.88, 3454.49, 3193.67, 5544.14, 2475.45, 3695.58, 5571.06, 14471.26,\n        10154.25, 3370.96\n      ],\n      2008: [\n        2626.41, 3709.78, 8701.34, 4242.36, 4376.19, 7158.84, 3097.12, 4319.75, 6085.84, 16993.34,\n        11567.42, 4198.93\n      ],\n      2009: [\n        2855.55, 3987.84, 8959.83, 3993.8, 5114, 7906.34, 3541.92, 4060.72, 6001.78, 18566.37,\n        11908.49, 4905.22\n      ],\n      2010: [\n        3388.38, 4840.23, 10707.68, 5234, 6367.69, 9976.82, 4506.31, 5025.15, 7218.32, 21753.93,\n        14297.93, 6436.62\n      ],\n      2011: [\n        3752.48, 5928.32, 13126.86, 6635.26, 8037.69, 12152.15, 5611.48, 5962.41, 7927.89, 25203.28,\n        16555.58, 8309.38\n      ]\n    });\n\n    dataMap.dataPI = dataFormatter({\n      2005: [\n        4854.33, 1658.19, 3340.54, 1611.07, 1542.26, 3295.45, 1413.83, 1857.42, 4776.2, 6612.22,\n        5360.1, 2137.77\n      ],\n      2006: [\n        5837.55, 1902.31, 3895.36, 1846.18, 1934.35, 3798.26, 1687.07, 2096.35, 5508.48, 7914.11,\n        6281.86, 2390.29\n      ],\n      2007: [\n        7236.15, 2250.04, 4600.72, 2257.99, 2467.41, 4486.74, 2025.44, 2493.04, 6821.11, 9730.91,\n        7613.46, 2789.78\n      ],\n      2008: [\n        8375.76, 2886.65, 5276.04, 2759.46, 3212.06, 5207.72, 2412.26, 2905.68, 7872.23, 11888.53,\n        8799.31, 3234.64\n      ],\n      2009: [\n        9179.19, 3405.16, 6068.31, 2886.92, 3696.65, 5891.25, 2756.26, 3371.95, 8930.85, 13629.07,\n        9918.78, 3662.15\n      ],\n      2010: [\n        10600.84, 4238.65, 7123.77, 3412.38, 4209.03, 6849.37, 3111.12, 4040.55, 9833.51, 17131.45,\n        12063.82, 4193.69\n      ],\n      2011: [\n        12363.18, 5219.24, 8483.17, 3960.87, 5015.89, 8158.98, 3679.91, 4918.09, 11142.86, 20842.21,\n        14180.23, 4975.96\n      ]\n    });\n\n    const getDefaultOptions = () => ({\n      baseOption: {\n        timeline: {\n          axisType: 'category',\n          autoPlay: false,\n          playInterval: 1000,\n          data: [\n            '2005-01-01',\n            '2006-01-01',\n            '2007-01-01',\n            '2008-01-01',\n            '2009-01-01',\n            '2010-01-01',\n            '2011-01-01'\n          ],\n          label: {\n            formatter: s => new Date(s).getFullYear()\n          },\n          lineStyle: {\n            color: utils.getColor('info')\n          },\n          itemStyle: {\n            color: utils.getColor('secondary')\n          },\n          checkpointStyle: {\n            color: utils.getColor('primary'),\n            shadowBlur: 0,\n            shadowOffsetX: 0,\n            shadowOffsetY: 0\n          },\n          controlStyle: {\n            color: utils.getColor('info')\n          }\n        },\n        title: {\n          textStyle: {\n            color: utils.getGrays()['700']\n          }\n        },\n        tooltip: {\n          trigger: 'axis',\n          axisPointer: {\n            type: 'shadow'\n          },\n          padding: [7, 10],\n          backgroundColor: utils.getGrays()['100'],\n          borderColor: utils.getGrays()['300'],\n          textStyle: { color: utils.getGrays()['1100'] },\n          borderWidth: 1,\n          transitionDuration: 0,\n          formatter: tooltipFormatter\n        },\n        legend: {\n          left: 'right',\n          data: ['Primary industry', 'Secondary industry', 'Tertiary Industry'],\n          textStyle: {\n            color: utils.getGrays()['700']\n          }\n        },\n        calculable: true,\n        xAxis: [\n          {\n            type: 'category',\n            data: months,\n            splitLine: { show: false },\n            axisLabel: {\n              color: utils.getGrays()['600']\n            },\n            axisLine: {\n              lineStyle: {\n                color: utils.getGrays()['400']\n              }\n            }\n          }\n        ],\n        yAxis: [\n          {\n            type: 'value',\n            axisLabel: {\n              formatter: value => `${value / 1000}k`,\n              color: utils.getGrays()['600']\n            },\n            splitLine: {\n              lineStyle: {\n                color: utils.getGrays()['200']\n              }\n            }\n          }\n        ],\n        series: [\n          {\n            name: 'Primary industry',\n            type: 'bar',\n            itemStyle: {\n              color: utils.getColor('primary'),\n              barBorderRadius: [3, 3, 0, 0]\n            }\n          },\n          {\n            name: 'Secondary industry',\n            type: 'bar',\n            itemStyle: {\n              color: utils.getColor('info'),\n              barBorderRadius: [3, 3, 0, 0]\n            }\n          },\n          {\n            name: 'Tertiary Industry',\n            type: 'bar',\n            itemStyle: {\n              color: utils.getColor('warning'),\n              barBorderRadius: [3, 3, 0, 0]\n            }\n          }\n        ],\n        grid: {\n          top: '10%',\n          bottom: '15%',\n          left: 5,\n          right: 10,\n          containLabel: true\n        }\n      },\n      options: [\n        {\n          title: { text: '2005' },\n          series: [\n            { data: dataMap.dataPI['2005'] },\n            { data: dataMap.dataSI['2005'] },\n            { data: dataMap.dataTI['2005'] }\n          ]\n        },\n        {\n          title: { text: '2006' },\n          series: [\n            { data: dataMap.dataPI['2006'] },\n            { data: dataMap.dataSI['2006'] },\n            { data: dataMap.dataTI['2006'] }\n          ]\n        },\n        {\n          title: { text: '2007' },\n          series: [\n            { data: dataMap.dataPI['2007'] },\n            { data: dataMap.dataSI['2007'] },\n            { data: dataMap.dataTI['2007'] }\n          ]\n        },\n        {\n          title: { text: '2008' },\n          series: [\n            { data: dataMap.dataPI['2008'] },\n            { data: dataMap.dataSI['2008'] },\n            { data: dataMap.dataTI['2008'] }\n          ]\n        },\n        {\n          title: { text: '2009' },\n          series: [\n            { data: dataMap.dataPI['2009'] },\n            { data: dataMap.dataSI['2009'] },\n            { data: dataMap.dataTI['2009'] }\n          ]\n        },\n        {\n          title: { text: '2010' },\n          series: [\n            { data: dataMap.dataPI['2010'] },\n            { data: dataMap.dataSI['2010'] },\n            { data: dataMap.dataTI['2010'] }\n          ]\n        },\n        {\n          title: { text: '2011' },\n          series: [\n            { data: dataMap.dataPI['2011'] },\n            { data: dataMap.dataSI['2011'] },\n            { data: dataMap.dataTI['2011'] }\n          ]\n        }\n      ]\n    });\n\n    echartSetOption(chart, userOptions, getDefaultOptions);\n  }\n};\n\nexport default echartsBarTimelineChartInit;\n","import utils from '../../../utils';\nimport { echartSetOption } from '../echarts-utils';\n\n/* -------------------------------------------------------------------------- */\n/*                             Echarts Bar Chart                             */\n/* -------------------------------------------------------------------------- */\n\nconst echartsWaterFallChartInit = () => {\n  const $waterfallChartEl = document.querySelector('.echart-nightfall-chart-example');\n\n  if ($waterfallChartEl) {\n    // Get options from data attribute\n    const userOptions = utils.getData($waterfallChartEl, 'options');\n    const chart = window.echarts.init($waterfallChartEl);\n\n    const days = [\n      '2021-06-05',\n      '2021-06-06',\n      '2021-06-07',\n      '2021-06-08',\n      '2021-06-09',\n      '2021-06-10',\n      '2021-06-11',\n      '2021-06-12',\n      '2021-06-13',\n      '2021-06-14',\n      '2021-06-15'\n    ];\n\n    const getDefaultOptions = () => ({\n      legend: {\n        data: ['Expenditure', 'Income'],\n        textStyle: {\n          color: utils.getGrays()['600']\n        }\n      },\n      tooltip: {\n        trigger: 'axis',\n        padding: [7, 10],\n        backgroundColor: utils.getGrays()['100'],\n        borderColor: utils.getGrays()['300'],\n        textStyle: { color: utils.getGrays()['1100'] },\n        borderWidth: 1,\n        formatter: params => {\n          const tar = params[1].value !== '-' ? params[1] : params[2];\n          return `${window.dayjs(tar.name).format('MMM DD')}<br/>${tar.seriesName}: ${tar.value}`;\n        },\n        transitionDuration: 0,\n        axisPointer: {\n          type: 'shadow'\n        }\n      },\n      xAxis: {\n        type: 'category',\n        data: days,\n        axisLine: {\n          lineStyle: {\n            color: utils.getGrays()['300'],\n            type: 'solid'\n          }\n        },\n        axisTick: { show: false },\n        axisLabel: {\n          color: utils.getGrays()['400'],\n          formatter: value => window.dayjs(value).format('MMM DD'),\n          margin: 15\n        },\n        splitLine: {\n          show: false\n        }\n      },\n      yAxis: {\n        type: 'value',\n        boundaryGap: true,\n        axisLabel: {\n          show: true,\n          color: utils.getGrays()['400'],\n          margin: 15\n        },\n        splitLine: {\n          show: true,\n          lineStyle: {\n            color: utils.getGrays()['200']\n          }\n        },\n        axisTick: { show: false },\n        axisLine: { show: false },\n        min: 600\n      },\n      series: [\n        {\n          name: 'Assist',\n          type: 'bar',\n          stack: 'Total',\n          itemStyle: {\n            barBorderColor: 'transparent',\n            color: 'transparent'\n          },\n          emphasis: {\n            itemStyle: {\n              barBorderColor: 'transparent',\n              color: 'transparent'\n            }\n          },\n          data: [0, 900, 1245, 1530, 1376, 1376, 1511, 1689, 1856, 1495, 1292]\n        },\n        {\n          name: 'Income',\n          type: 'bar',\n          stack: 'Total',\n          label: {\n            show: true,\n            position: 'top',\n            color: utils.getGrays()['600']\n          },\n          data: [900, 345, 393, '-', '-', 135, 178, 286, '-', '-', '-'],\n          itemStyle: {\n            color: utils.getColor('primary'),\n            barBorderRadius: [3, 3, 0, 0]\n          }\n        },\n        {\n          name: 'Expenditure',\n          type: 'bar',\n          stack: 'Total',\n          label: {\n            show: true,\n            position: 'bottom',\n            color: utils.getGrays()['600']\n          },\n          data: ['-', '-', '-', 108, 154, '-', '-', '-', 119, 361, 203],\n          itemStyle: {\n            color: utils.getColor('success'),\n            barBorderRadius: [3, 3, 0, 0]\n          }\n        }\n      ],\n      grid: {\n        right: '3%',\n        left: '10%',\n        bottom: '10%',\n        top: '10%'\n      }\n    });\n\n    echartSetOption(chart, userOptions, getDefaultOptions);\n  }\n};\n\nexport default echartsWaterFallChartInit;\n","import utils from '../../../utils';\nimport { echartSetOption, tooltipFormatter } from '../echarts-utils';\n\n/* -------------------------------------------------------------------------- */\n/*                             Echarts Bar Chart                             */\n/* -------------------------------------------------------------------------- */\n\nconst echartsBasicBarChartInit = () => {\n  const $barChartEl = document.querySelector('.echart-basic-bar-chart-example');\n\n  if ($barChartEl) {\n    // Get options from data attribute\n    const userOptions = utils.getData($barChartEl, 'options');\n    const chart = window.echarts.init($barChartEl);\n\n    const months = [\n      'January',\n      'February',\n      'March',\n      'April',\n      'May',\n      'June',\n      'July',\n      'August',\n      'September',\n      'October',\n      'November',\n      'December'\n    ];\n\n    const data = [1272, 1301, 1402, 1216, 1086, 1236, 1219, 1330, 1367, 1416, 1297, 1204];\n\n    const getDefaultOptions = () => ({\n      tooltip: {\n        trigger: 'axis',\n        padding: [7, 10],\n        backgroundColor: utils.getGrays()['100'],\n        borderColor: utils.getGrays()['300'],\n        textStyle: { color: utils.getGrays()['1100'] },\n        borderWidth: 1,\n        formatter: tooltipFormatter,\n        transitionDuration: 0,\n        axisPointer: {\n          type: 'none'\n        }\n      },\n      xAxis: {\n        type: 'category',\n        data: months,\n        axisLine: {\n          lineStyle: {\n            color: utils.getGrays()['300'],\n            type: 'solid'\n          }\n        },\n        axisTick: { show: false },\n        axisLabel: {\n          color: utils.getGrays()['400'],\n          formatter: value => value.substring(0, 3),\n          margin: 15\n        },\n        splitLine: {\n          show: false\n        }\n      },\n      yAxis: {\n        type: 'value',\n        boundaryGap: true,\n        axisLabel: {\n          show: true,\n          color: utils.getGrays()['400'],\n          margin: 15\n        },\n        splitLine: {\n          show: true,\n          lineStyle: {\n            color: utils.getGrays()['200']\n          }\n        },\n        axisTick: { show: false },\n        axisLine: { show: false },\n        min: 600\n      },\n      series: [\n        {\n          type: 'bar',\n          name: 'Total',\n          data,\n          lineStyle: { color: utils.getColor('primary') },\n          itemStyle: {\n            color: utils.getColor('primary'),\n            barBorderRadius: [3, 3, 0, 0]\n          },\n          showSymbol: false,\n          symbol: 'circle',\n          smooth: false,\n          hoverAnimation: true\n        }\n      ],\n      grid: { right: '3%', left: '10%', bottom: '10%', top: '5%' }\n    });\n\n    echartSetOption(chart, userOptions, getDefaultOptions);\n  }\n};\n\nexport default echartsBasicBarChartInit;\n","import utils from '../../../utils';\nimport { echartSetOption } from '../echarts-utils';\n\n/* -------------------------------------------------------------------------- */\n/*                             Echarts Bar Chart                             */\n/* -------------------------------------------------------------------------- */\n\nconst echartsBasicCandlestickChartInit = () => {\n  const $basicCandleStickChartEl = document.querySelector('.echart-candlestick-chart-example');\n\n  if ($basicCandleStickChartEl) {\n    // Get options from data attribute\n    const userOptions = utils.getData($basicCandleStickChartEl, 'options');\n    const chart = window.echarts.init($basicCandleStickChartEl);\n\n    const data = [\n      ['2013/1/24', 2320.26, 2320.26, 2287.3, 2362.94],\n      ['2013/1/25', 2300, 2291.3, 2288.26, 2308.38],\n      ['2013/1/28', 2295.35, 2346.5, 2295.35, 2346.92],\n      ['2013/1/29', 2347.22, 2358.98, 2337.35, 2363.8],\n      ['2013/1/30', 2360.75, 2382.48, 2347.89, 2383.76],\n      ['2013/1/31', 2383.43, 2385.42, 2371.23, 2391.82],\n      ['2013/2/1', 2377.41, 2419.02, 2369.57, 2421.15],\n      ['2013/2/4', 2425.92, 2428.15, 2417.58, 2440.38],\n      ['2013/2/5', 2411, 2433.13, 2403.3, 2437.42],\n      ['2013/2/6', 2432.68, 2434.48, 2427.7, 2441.73],\n      ['2013/2/7', 2430.69, 2418.53, 2394.22, 2433.89],\n      ['2013/2/8', 2416.62, 2432.4, 2414.4, 2443.03],\n      ['2013/2/18', 2441.91, 2421.56, 2415.43, 2444.8],\n      ['2013/2/19', 2420.26, 2382.91, 2373.53, 2427.07],\n      ['2013/2/20', 2383.49, 2397.18, 2370.61, 2397.94],\n      ['2013/2/21', 2378.82, 2325.95, 2309.17, 2378.82],\n      ['2013/2/22', 2322.94, 2314.16, 2308.76, 2330.88],\n      ['2013/2/25', 2320.62, 2325.82, 2315.01, 2338.78],\n      ['2013/2/26', 2313.74, 2293.34, 2289.89, 2340.71],\n      ['2013/2/27', 2297.77, 2313.22, 2292.03, 2324.63],\n      ['2013/2/28', 2322.32, 2365.59, 2308.92, 2366.16],\n      ['2013/3/1', 2364.54, 2359.51, 2330.86, 2369.65],\n      ['2013/3/4', 2332.08, 2273.4, 2259.25, 2333.54],\n      ['2013/3/5', 2274.81, 2326.31, 2270.1, 2328.14],\n      ['2013/3/6', 2333.61, 2347.18, 2321.6, 2351.44],\n      ['2013/3/7', 2340.44, 2324.29, 2304.27, 2352.02],\n      ['2013/3/8', 2326.42, 2318.61, 2314.59, 2333.67],\n      ['2013/3/11', 2314.68, 2310.59, 2296.58, 2320.96],\n      ['2013/3/12', 2309.16, 2286.6, 2264.83, 2333.29],\n      ['2013/3/13', 2282.17, 2263.97, 2253.25, 2286.33],\n      ['2013/3/14', 2255.77, 2270.28, 2253.31, 2276.22],\n      ['2013/3/15', 2269.31, 2278.4, 2250, 2312.08],\n      ['2013/3/18', 2267.29, 2240.02, 2239.21, 2276.05],\n      ['2013/3/19', 2244.26, 2257.43, 2232.02, 2261.31],\n      ['2013/3/20', 2257.74, 2317.37, 2257.42, 2317.86],\n      ['2013/3/21', 2318.21, 2324.24, 2311.6, 2330.81],\n      ['2013/3/22', 2321.4, 2328.28, 2314.97, 2332],\n      ['2013/3/25', 2334.74, 2326.72, 2319.91, 2344.89],\n      ['2013/3/26', 2318.58, 2297.67, 2281.12, 2319.99],\n      ['2013/3/27', 2299.38, 2301.26, 2289, 2323.48],\n      ['2013/3/28', 2273.55, 2236.3, 2232.91, 2273.55],\n      ['2013/3/29', 2238.49, 2236.62, 2228.81, 2246.87],\n      ['2013/4/1', 2229.46, 2234.4, 2227.31, 2243.95],\n      ['2013/4/2', 2234.9, 2227.74, 2220.44, 2253.42],\n      ['2013/4/3', 2232.69, 2225.29, 2217.25, 2241.34],\n      ['2013/4/8', 2196.24, 2211.59, 2180.67, 2212.59],\n      ['2013/4/9', 2215.47, 2225.77, 2215.47, 2234.73],\n      ['2013/4/10', 2224.93, 2226.13, 2212.56, 2233.04],\n      ['2013/4/11', 2236.98, 2219.55, 2217.26, 2242.48],\n      ['2013/4/12', 2218.09, 2206.78, 2204.44, 2226.26]\n    ];\n\n    const getDefaultOptions = () => ({\n      tooltip: {\n        trigger: 'axis',\n        padding: [7, 10],\n        backgroundColor: utils.getGrays()['100'],\n        borderColor: utils.getGrays()['300'],\n        textStyle: { color: utils.getGrays()['1100'] },\n        borderWidth: 1,\n        transitionDuration: 0,\n        axisPointer: {\n          type: 'none'\n        }\n      },\n      toolbox: {\n        top: 0,\n        feature: {\n          dataZoom: {\n            yAxisIndex: false\n          },\n          restore: { show: true }\n        },\n        iconStyle: {\n          borderColor: utils.getGrays()['700'],\n          borderWidth: 1\n        },\n\n        emphasis: {\n          iconStyle: {\n            textFill: utils.getGrays()['600']\n          }\n        }\n      },\n      dataZoom: [\n        {\n          type: 'inside',\n          start: 0,\n          end: 100,\n          minValueSpan: 10\n        }\n      ],\n      xAxis: {\n        type: 'category',\n        data: data.map(item => item[0]),\n        scale: true,\n        splitLine: { show: false },\n        splitNumber: 10,\n        min: 'dataMin',\n        max: 'dataMax',\n        boundaryGap: true,\n        axisPointer: {\n          lineStyle: {\n            color: utils.getGrays()['300'],\n            type: 'dashed'\n          }\n        },\n        axisLine: {\n          lineStyle: {\n            color: utils.getGrays()['300'],\n            type: 'solid'\n          }\n        },\n        axisTick: { show: false },\n        axisLabel: {\n          color: utils.getGrays()['600'],\n          formatter: value => window.dayjs(value, 'YYYY-MM-DD').format('MMM DD'),\n          margin: 15,\n          fontWeight: 500\n        }\n      },\n      yAxis: {\n        scale: true,\n        axisPointer: { show: false },\n        splitLine: {\n          lineStyle: {\n            color: utils.getGrays()['200'],\n            type: 'dashed'\n          }\n        },\n        boundaryGap: false,\n        axisLabel: {\n          show: true,\n          color: utils.getGrays()['600'],\n          margin: 15,\n          fontWeight: 500\n        },\n        axisTick: { show: false },\n        axisLine: { show: false }\n      },\n      series: [\n        {\n          type: 'candlestick',\n          name: 'Volume',\n          data: data.map(item => item.slice(1)),\n          itemStyle: {\n            color: utils.getColor('warning'),\n            color0: utils.getColor('primary'),\n            borderColor: utils.getColor('warning'),\n            borderColor0: utils.getColor('primary')\n          }\n        }\n      ],\n      grid: {\n        right: 5,\n        left: 5,\n        bottom: 5,\n        top: '15%',\n        containLabel: true\n      }\n    });\n\n    echartSetOption(chart, userOptions, getDefaultOptions);\n  }\n};\n\nexport default echartsBasicCandlestickChartInit;\n","import utils from '../../../utils';\nimport { echartSetOption } from '../echarts-utils';\n\n/* -------------------------------------------------------------------------- */\n/*                             Echarts Basic Gauge Chart                      */\n/* -------------------------------------------------------------------------- */\n\nconst echartsBasicGaugeChartInit = () => {\n  const $basicGaugeChartEl = document.querySelector('.echart-basic-gauge-chart-example');\n\n  if ($basicGaugeChartEl) {\n    // Get options from data attribute\n    const userOptions = utils.getData($basicGaugeChartEl, 'options');\n    const chart = window.echarts.init($basicGaugeChartEl);\n\n    const tooltipFormatter = params => `\n      <div>\n          <h6 class=\"fs-10 text-700 mb-0\">\n            <span class=\"fas fa-circle me-1\" style='color:${params[0].color}'></span>\n            ${params[0].name} : ${params[0].value}\n          </h6>\n      </div>\n      `;\n\n    const getDefaultOptions = () => ({\n      tooltip: {\n        trigger: 'axis',\n        padding: [7, 10],\n        backgroundColor: utils.getGrays()['100'],\n        borderColor: utils.getGrays()['300'],\n        textStyle: { color: utils.getGrays()['1100'] },\n        borderWidth: 1,\n        formatter: tooltipFormatter,\n        transitionDuration: 0,\n        axisPointer: {\n          type: 'none'\n        }\n      },\n      radius: '100%',\n      series: [\n        {\n          name: 'Pressure',\n          type: 'gauge',\n          splitLine: {\n            lineStyle: {\n              color: utils.getGrays()['600']\n            }\n          },\n          axisLabel: {\n            color: utils.getGrays()['600']\n          },\n          detail: {\n            formatter: '{value}'\n          },\n          title: {\n            color: utils.getGrays()['600']\n          },\n          data: [\n            {\n              value: 50,\n              name: 'SCORE',\n              detail: {\n                color: utils.getGrays()['600']\n              }\n            }\n          ]\n        }\n      ]\n    });\n\n    echartSetOption(chart, userOptions, getDefaultOptions);\n  }\n};\n\nexport default echartsBasicGaugeChartInit;\n","import utils from '../../../utils';\nimport { getPosition, echartSetOption } from '../echarts-utils';\n\n/* -------------------------------------------------------------------------- */\n/*                             Echarts Line Chart                             */\n/* -------------------------------------------------------------------------- */\n\nconst echartsLineChartInit = () => {\n  const $lineChartEl = document.querySelector('.echart-line-chart-example');\n\n  if ($lineChartEl) {\n    // Get options from data attribute\n    const userOptions = utils.getData($lineChartEl, 'options');\n    const chart = window.echarts.init($lineChartEl);\n\n    const months = [\n      'January',\n      'February',\n      'March',\n      'April',\n      'May',\n      'June',\n      'July',\n      'August',\n      'September',\n      'October',\n      'November',\n      'December'\n    ];\n\n    const data = [1272, 1301, 1402, 1216, 1086, 1236, 1219, 1330, 1367, 1416, 1297, 1204];\n\n    const tooltipFormatter = params => `\n      <div>\n          <h6 class=\"fs-10 text-700 mb-0\">\n            <span class=\"fas fa-circle me-1\" style='color:${params[0].borderColor}'></span>\n            ${params[0].name} : ${params[0].value}\n          </h6>\n      </div>\n      `;\n\n    const getDefaultOptions = () => ({\n      tooltip: {\n        trigger: 'axis',\n        padding: [7, 10],\n        backgroundColor: utils.getGrays()['100'],\n        borderColor: utils.getGrays()['300'],\n        textStyle: { color: utils.getGrays()['1100'] },\n        borderWidth: 1,\n        formatter: tooltipFormatter,\n        transitionDuration: 0,\n        position(pos, params, dom, rect, size) {\n          return getPosition(pos, params, dom, rect, size);\n        },\n        axisPointer: {\n          type: 'none'\n        }\n      },\n      xAxis: {\n        type: 'category',\n        data: months,\n        boundaryGap: false,\n        axisLine: {\n          lineStyle: {\n            color: utils.getGrays()['300']\n          }\n        },\n        axisTick: { show: false },\n        axisLabel: {\n          color: utils.getGrays()['400'],\n          formatter: value => value.substring(0, 3),\n          margin: 15\n        },\n        splitLine: {\n          show: false\n        }\n      },\n      yAxis: {\n        type: 'value',\n        splitLine: {\n          lineStyle: {\n            type: 'dashed',\n            color: utils.getGrays()['200']\n          }\n        },\n        boundaryGap: false,\n        axisLabel: {\n          show: true,\n          color: utils.getGrays()['400'],\n          margin: 15\n        },\n        axisTick: { show: false },\n        axisLine: { show: false },\n        min: 600\n      },\n      series: [\n        {\n          type: 'line',\n          data,\n          itemStyle: {\n            color: utils.getGrays()['100'],\n            borderColor: utils.getColor('primary'),\n            borderWidth: 2\n          },\n          lineStyle: {\n            color: utils.getColor('primary')\n          },\n          showSymbol: false,\n          symbol: 'circle',\n          symbolSize: 10,\n          smooth: false,\n          hoverAnimation: true\n        }\n      ],\n      grid: {\n        right: '3%', left: '10%', bottom: '10%', top: '5%'\n      }\n    });\n\n    echartSetOption(chart, userOptions, getDefaultOptions);\n  }\n};\n\nexport default echartsLineChartInit;\n","import utils from '../../../utils';\nimport { echartSetOption } from '../echarts-utils';\n\n/* -------------------------------------------------------------------------- */\n/*                           Echarts Bubble Chart                             */\n/* -------------------------------------------------------------------------- */\n\nconst echartsBubbleChartInit = () => {\n  const $bubbleChartEl = document.querySelector('.echart-bubble-chart-example');\n\n  if ($bubbleChartEl) {\n    // Get options from data attribute\n    const userOptions = utils.getData($bubbleChartEl, 'options');\n    const chart = window.echarts.init($bubbleChartEl);\n\n    const data = [\n      [\n        [28604, 77, 17096869, 'Australia', 1990],\n        [31163, 77.4, 27662440, 'Canada', 1990],\n        [1516, 68, 1154605773, 'China', 1990],\n        [28599, 75, 4986705, 'Finland', 1990],\n        [29476, 77.1, 56943299, 'France', 1990],\n        [31476, 75.4, 78958237, 'Germany', 1990],\n        [1777, 57.7, 870601776, 'India', 1990],\n        [29550, 79.1, 122249285, 'Japan', 1990],\n        [12087, 72, 42972254, 'South Korea', 1990],\n        [24021, 75.4, 3397534, 'New Zealand', 1990],\n        [43296, 76.8, 4240375, 'Norway', 1990],\n        [10088, 70.8, 38195258, 'Poland', 1990],\n        [19349, 69.6, 147568552, 'Russia', 1990],\n        [26424, 75.7, 57110117, 'United Kingdom', 1990],\n        [37062, 75.4, 252847810, 'United States', 1990]\n      ],\n      [\n        [44056, 81.8, 23968973, 'Australia', 2015],\n        [43294, 81.7, 35939927, 'Canada', 2015],\n        [13334, 76.9, 1376048943, 'China', 2015],\n        [38923, 80.8, 5503457, 'Finland', 2015],\n        [37599, 81.9, 64395345, 'France', 2015],\n        [44053, 81.1, 80688545, 'Germany', 2015],\n        [5903, 66.8, 1311050527, 'India', 2015],\n        [36162, 83.5, 126573481, 'Japan', 2015],\n        [34644, 80.7, 50293439, 'South Korea', 2015],\n        [34186, 80.6, 4528526, 'New Zealand', 2015],\n        [64304, 81.6, 5210967, 'Norway', 2015],\n        [24787, 77.3, 38611794, 'Poland', 2015],\n        [23038, 73.13, 143456918, 'Russia', 2015],\n        [38225, 81.4, 64715810, 'United Kingdom', 2015],\n        [53354, 79.1, 321773631, 'United States', 2015]\n      ]\n    ];\n\n    const getDefaultOptions = () => ({\n      title: {\n        text: '1990 and 2015 have per capita and GDP',\n        left: 0,\n        top: 0,\n        textStyle: {\n          color: utils.getGrays()['600'],\n          fontWeight: 600\n        }\n      },\n      legend: {\n        right: 0,\n        top: '10%',\n        data: ['1990', '2015'],\n        textStyle: {\n          color: utils.getGrays()['600']\n        }\n      },\n      xAxis: {\n        axisLabel: {\n          color: utils.getGrays()['600'],\n          formatter: value => `${value / 1000}k`\n        },\n        axisLine: {\n          show: true,\n          lineStyle: {\n            color: utils.getGrays()['300']\n          }\n        },\n\n        splitLine: {\n          show: true,\n          lineStyle: {\n            color: utils.getGrays()['200']\n          }\n        }\n      },\n      yAxis: {\n        scale: true,\n        axisLabel: {\n          color: utils.getGrays()['600']\n        },\n        splitLine: {\n          show: true,\n          lineStyle: {\n            color: utils.getGrays()['200']\n          }\n        },\n\n        axisLine: {\n          show: true,\n          lineStyle: {\n            color: utils.getGrays()['300']\n          }\n        }\n      },\n      series: [\n        {\n          name: '1990',\n          data: data[0],\n          type: 'scatter',\n          symbolSize: value => Math.sqrt(value[2]) / 5e2,\n          emphasis: {\n            focus: 'series',\n            label: {\n              color: utils.getGrays()['600'],\n              show: true,\n              formatter: param => param.data[3],\n              position: 'top'\n            }\n          },\n          itemStyle: {\n            color: utils.rgbaColor(utils.getColor('primary'), 0.7)\n          }\n        },\n        {\n          name: '2015',\n          data: data[1],\n          type: 'scatter',\n          symbolSize: value => Math.sqrt(value[2]) / 7e2,\n          emphasis: {\n            focus: 'series',\n            label: {\n              color: utils.getGrays()['600'],\n              show: true,\n              formatter: param => param.data[3],\n              position: 'top'\n            }\n          },\n          itemStyle: {\n            color: utils.rgbaColor(utils.getColor('warning'), 0.7)\n          }\n        }\n      ],\n      grid: {\n        left: 5,\n        right: 10,\n        bottom: 5,\n        top: '20%',\n        containLabel: true\n      }\n    });\n\n    echartSetOption(chart, userOptions, getDefaultOptions);\n  }\n};\n\nexport default echartsBubbleChartInit;\n","import utils from '../../../utils';\nimport { echartSetOption } from '../echarts-utils';\n\n/* -------------------------------------------------------------------------- */\n/*                             Echarts Bar Chart                             */\n/* -------------------------------------------------------------------------- */\n\nconst echartsCandlestickMixedChartInit = () => {\n  const $candleStickMixedChartEl = document.querySelector(\n    '.echart-candlestick-mixed-chart-example'\n  );\n\n  if ($candleStickMixedChartEl) {\n    // Get options from data attribute\n    const userOptions = utils.getData($candleStickMixedChartEl, 'options');\n    const chart = window.echarts.init($candleStickMixedChartEl);\n\n    const colorList = [\n      utils.getColor('primary'),\n      utils.getColor('info'),\n      utils.getColor('dark'),\n      utils.getColor('warning')\n    ];\n\n    const calculateMA = (dayCount, data) => {\n      const result = [];\n      for (let i = dayCount; i < data.length; i += 1) {\n        let sum = 0;\n        for (let j = 0; j < dayCount; j += 1) {\n          sum += data[i - j][1];\n        }\n        result.push((sum / dayCount).toFixed(2));\n      }\n      return result;\n    };\n\n    const dates = utils.getPastDates(61).map(date => window.dayjs(date).format('MMM DD, YYYY'));\n\n    const data = [\n      [17512.58, 17633.11, 17434.27, 17642.81, 86160000],\n      [17652.36, 17716.66, 17652.36, 17790.11, 79330000],\n      [17716.05, 17685.09, 17669.72, 17755.7, 102600000],\n      [17661.74, 17792.75, 17568.02, 17811.48, 104890000],\n      [17799.39, 17737, 17710.67, 17806.38, 85230000],\n      [17718.03, 17603.32, 17579.56, 17718.03, 115230000],\n      [17605.45, 17716.05, 17542.54, 17723.55, 99410000],\n      [17687.28, 17541.96, 17484.23, 17687.28, 90120000],\n      [17555.39, 17576.96, 17528.16, 17694.51, 79990000],\n      [17586.48, 17556.41, 17555.9, 17731.63, 107100000],\n      [17571.34, 17721.25, 17553.57, 17744.43, 81020000],\n      [17741.66, 17908.28, 17741.66, 17918.35, 91710000],\n      [17912.25, 17926.43, 17885.44, 17962.14, 84510000],\n      [17925.95, 17897.46, 17867.41, 17937.65, 118160000],\n      [17890.2, 18004.16, 17848.22, 18009.53, 89390000],\n      [18012.1, 18053.6, 17984.43, 18103.46, 89820000],\n      [18059.49, 18096.27, 18031.21, 18167.63, 100210000],\n      [18092.84, 17982.52, 17963.89, 18107.29, 102720000],\n      [17985.05, 18003.75, 17909.89, 18026.85, 134120000],\n      [17990.94, 17977.24, 17855.55, 17990.94, 83770000],\n      [17987.38, 17990.32, 17934.17, 18043.77, 92570000],\n      [17996.14, 18041.55, 17920.26, 18084.66, 109090000],\n      [18023.88, 17830.76, 17796.55, 18035.73, 100920000],\n      [17813.09, 17773.64, 17651.98, 17814.83, 136670000],\n      [17783.78, 17891.16, 17773.71, 17912.35, 80100000],\n      [17870.75, 17750.91, 17670.88, 17870.75, 97060000],\n      [17735.02, 17651.26, 17609.01, 17738.06, 95020000],\n      [17664.48, 17660.71, 17615.82, 17736.11, 81530000],\n      [17650.3, 17740.63, 17580.38, 17744.54, 80020000],\n      [17743.85, 17705.91, 17668.38, 17783.16, 85590000],\n      [17726.66, 17928.35, 17726.66, 17934.61, 75790000],\n      [17919.03, 17711.12, 17711.05, 17919.03, 87390000],\n      [17711.12, 17720.5, 17625.38, 17798.19, 88560000],\n      [17711.12, 17535.32, 17512.48, 17734.74, 86640000],\n      [17531.76, 17710.71, 17531.76, 17755.8, 88440000],\n      [17701.46, 17529.98, 17469.92, 17701.46, 103260000],\n      [17501.28, 17526.62, 17418.21, 17636.22, 79120000],\n      [17514.16, 17435.4, 17331.07, 17514.16, 95530000],\n      [17437.32, 17500.94, 17437.32, 17571.75, 111990000],\n      [17507.04, 17492.93, 17480.05, 17550.7, 87790000],\n      [17525.19, 17706.05, 17525.19, 17742.59, 86480000],\n      [17735.09, 17851.51, 17735.09, 17891.71, 79180000],\n      [17859.52, 17828.29, 17803.82, 17888.66, 68940000],\n      [17826.85, 17873.22, 17824.73, 17873.22, 73190000],\n      [17891.5, 17787.2, 17724.03, 17899.24, 147390000],\n      [17754.55, 17789.67, 17664.79, 17809.18, 78530000],\n      [17789.05, 17838.56, 17703.55, 17838.56, 75560000],\n      [17799.8, 17807.06, 17689.68, 17833.17, 82270000],\n      [17825.69, 17920.33, 17822.81, 17949.68, 71870000],\n      [17936.22, 17938.28, 17936.22, 18003.23, 78750000],\n      [17931.91, 18005.05, 17931.91, 18016, 71260000],\n      [17969.98, 17985.19, 17915.88, 18005.22, 69690000],\n      [17938.82, 17865.34, 17812.34, 17938.82, 90540000],\n      [17830.5, 17732.48, 17731.35, 17893.28, 101690000],\n      [17710.77, 17674.82, 17595.79, 17733.92, 93740000],\n      [17703.65, 17640.17, 17629.01, 17762.96, 94130000],\n      [17602.23, 17733.1, 17471.29, 17754.91, 91950000],\n      [17733.44, 17675.16, 17602.78, 17733.44, 248680000],\n      [17736.87, 17804.87, 17736.87, 17946.36, 99380000],\n      [17827.33, 17829.73, 17799.8, 17877.84, 85130000],\n      [17832.67, 17780.83, 17770.36, 17920.16, 89440000]\n    ];\n\n    const dataMA5 = calculateMA(5, data);\n\n    const getDefaultOptions = () => ({\n      animation: false,\n      color: colorList,\n      legend: {\n        top: 0,\n        data: ['MA1', 'MA5', 'Volume'],\n        textStyle: {\n          color: utils.getGrays()['600']\n        }\n      },\n      tooltip: {\n        trigger: 'axis',\n        padding: [7, 10],\n        backgroundColor: utils.getGrays()['100'],\n        borderColor: utils.getGrays()['300'],\n        textStyle: { color: utils.getGrays()['1100'] },\n        borderWidth: 1,\n        transitionDuration: 0,\n        position: (pos, params, el, elRect, size) => {\n          const obj = {\n            top: 60\n          };\n          obj[['left', 'right'][+(pos[0] < size.viewSize[0] / 2)]] = 5;\n          return obj;\n        }\n      },\n      axisPointer: {\n        link: [\n          {\n            xAxisIndex: [0, 1]\n          }\n        ]\n      },\n      dataZoom: [\n        {\n          type: 'slider',\n          xAxisIndex: [0, 1],\n          realtime: false,\n          start: 20,\n          end: 70,\n          top: 35,\n          height: 15,\n          handleIcon:\n            'path://M10.7,11.9H9.3c-4.9,0.3-8.8,4.4-8.8,9.4c0,5,3.9,9.1,8.8,9.4h1.3c4.9-0.3,8.8-4.4,8.8-9.4C19.5,16.3,15.6,12.2,10.7,11.9z M13.3,24.4H6.7V23h6.6V24.4z M13.3,19.6H6.7v-1.4h6.6V19.6z',\n          handleSize: '120%'\n        },\n        {\n          type: 'inside',\n          xAxisIndex: [0, 1],\n          start: 40,\n          end: 70,\n          top: 30,\n          height: 20\n        }\n      ],\n      xAxis: [\n        {\n          type: 'category',\n          data: dates,\n          boundaryGap: false,\n          axisLine: {\n            lineStyle: { color: utils.getGrays()['300'] }\n          },\n          axisLabel: {\n            color: utils.getGrays()['600'],\n            formatter: value => window.dayjs(value).format('MMM DD')\n          },\n          min: 'dataMin',\n          max: 'dataMax',\n          axisPointer: {\n            show: true\n          }\n        },\n        {\n          type: 'category',\n          gridIndex: 1,\n          data: dates,\n          scale: true,\n          boundaryGap: false,\n          splitLine: { show: false },\n          axisLabel: { show: false },\n          axisTick: { show: false },\n          axisLine: { lineStyle: { color: 'blue' } },\n          splitNumber: 20,\n          min: 'dataMin',\n          max: 'dataMax',\n          axisPointer: {\n            type: 'shadow',\n            label: { show: false },\n            triggerTooltip: true\n          }\n        }\n      ],\n      yAxis: [\n        {\n          scale: true,\n          splitNumber: 2,\n          axisLine: { show: false },\n          splitLine: {\n            lineStyle: {\n              color: utils.getGrays()['200']\n            }\n          },\n          axisTick: { show: false },\n          axisLabel: {\n            color: utils.getGrays()['600']\n          }\n        },\n        {\n          scale: true,\n          gridIndex: 1,\n          splitNumber: 2,\n          axisLabel: { show: false },\n          axisLine: { show: false },\n          axisTick: { show: false },\n          splitLine: { show: false }\n        }\n      ],\n      grid: [\n        {\n          left: 5,\n          right: 12,\n          // top: 110,\n          bottom: 60,\n          height: 160,\n          containLabel: true\n        },\n        {\n          left: 50,\n          right: 12,\n          height: 40,\n          top: 260,\n          containLabel: true\n        }\n      ],\n      series: [\n        {\n          name: 'Volume',\n          type: 'bar',\n          xAxisIndex: 1,\n          yAxisIndex: 1,\n          itemStyle: {\n            color: utils.getColor('primary')\n          },\n          emphasis: {\n            itemStyle: {\n              color: utils.getColor('primary')\n            }\n          },\n          data: data.map(item => item[4])\n        },\n        {\n          type: 'candlestick',\n          name: 'MA1',\n          data,\n          itemStyle: {\n            color: utils.getColor('success'),\n            color0: utils.getColor('info'),\n            borderColor: utils.getColor('success'),\n            borderColor0: utils.getColor('info')\n          }\n        },\n        {\n          name: 'MA5',\n          type: 'line',\n          data: dataMA5,\n          smooth: true,\n          showSymbol: false,\n          lineStyle: {\n            width: 1,\n            color: utils.getColor('primary')\n          }\n        }\n      ]\n    });\n\n    echartSetOption(chart, userOptions, getDefaultOptions);\n  }\n};\n\nexport default echartsCandlestickMixedChartInit;\n","import utils from '../../../utils';\nimport { echartSetOption } from '../echarts-utils';\n\n/* -------------------------------------------------------------------------- */\n/*                             Echarts Doughnut Chart                         */\n/* -------------------------------------------------------------------------- */\n\nconst echartsDoughnutChartInit = () => {\n  const $doughnutChartEl = document.querySelector(\n    '.echart-doughnut-chart-example'\n  );\n\n  if ($doughnutChartEl) {\n    // Get options from data attribute\n    const userOptions = utils.getData($doughnutChartEl, 'options');\n    const chart = window.echarts.init($doughnutChartEl);\n\n    const getDefaultOptions = () => ({\n      legend: {\n        left: 'left',\n        textStyle: {\n          color: utils.getGrays()['600']\n        }\n      },\n      series: [\n        {\n          type: 'pie',\n          radius: ['40%', '70%'],\n          center: ['50%', '55%'],\n          avoidLabelOverlap: false,\n          label: {\n            show: false,\n            position: 'center'\n          },\n          labelLine: {\n            show: false\n          },\n          data: [\n            {\n              value: 1048,\n              name: 'Facebook',\n              itemStyle: {\n                color: utils.getColor('primary')\n              }\n            },\n            {\n              value: 735,\n              name: 'Youtube',\n              itemStyle: {\n                color: utils.getColor('danger')\n              }\n            },\n            {\n              value: 580,\n              name: 'Twitter',\n              itemStyle: {\n                color: utils.getColor('info')\n              }\n            },\n            {\n              value: 484,\n              name: 'Linkedin',\n              itemStyle: {\n                color: utils.getColor('success')\n              }\n            },\n            {\n              value: 300,\n              name: 'Github',\n              itemStyle: {\n                color: utils.getColor('warning')\n              }\n            }\n          ]\n        }\n      ],\n      tooltip: {\n        trigger: 'item',\n        padding: [7, 10],\n        backgroundColor: utils.getGrays()['100'],\n        borderColor: utils.getGrays()['300'],\n        textStyle: { color: utils.getGrays()['1100'] },\n        borderWidth: 1,\n        transitionDuration: 0,\n        axisPointer: {\n          type: 'none'\n        }\n      }\n    });\n\n    echartSetOption(chart, userOptions, getDefaultOptions);\n  }\n};\n\nexport default echartsDoughnutChartInit;\n","import utils from '../../../utils';\nimport { echartSetOption } from '../echarts-utils';\n\n/* -------------------------------------------------------------------------- */\n/*                             Echarts Doughnut Chart                         */\n/* -------------------------------------------------------------------------- */\n\nconst echartsDoughnutRoundedChartInit = () => {\n  const $doughnutRoundedChartEl = document.querySelector('.echart-doughnut-rounded-chart');\n\n  if ($doughnutRoundedChartEl) {\n    // Get options from data attribute\n    const userOptions = utils.getData($doughnutRoundedChartEl, 'options');\n    const chart = window.echarts.init($doughnutRoundedChartEl);\n\n    const getDefaultOptions = () => ({\n      legend: {\n        orient: 'vertical',\n        left: 'left',\n        textStyle: {\n          color: utils.getGrays()['600']\n        }\n      },\n      series: [\n        {\n          type: 'pie',\n          radius: ['40%', '70%'],\n          center: window.innerWidth < 530 ? ['65%', '55%'] : ['50%', '55%'],\n          avoidLabelOverlap: false,\n          itemStyle: {\n            borderRadius: 10,\n            borderColor: utils.getGrays()['100'],\n            borderWidth: 2\n          },\n          label: {\n            show: false,\n            position: 'center'\n          },\n          labelLine: {\n            show: false\n          },\n          data: [\n            {\n              value: 1048,\n              name: 'Starter',\n              itemStyle: {\n                color: utils.getColor('primary')\n              }\n            },\n            {\n              value: 735,\n              name: 'Basic',\n              itemStyle: {\n                color: utils.getColor('danger')\n              }\n            },\n            {\n              value: 580,\n              name: 'Optimal',\n              itemStyle: {\n                color: utils.getColor('info')\n              }\n            },\n            {\n              value: 484,\n              name: 'Business',\n              itemStyle: {\n                color: utils.getColor('success')\n              }\n            },\n            {\n              value: 300,\n              name: 'Premium',\n              itemStyle: {\n                color: utils.getColor('warning')\n              }\n            }\n          ]\n        }\n      ],\n      tooltip: {\n        trigger: 'item',\n        padding: [7, 10],\n        backgroundColor: utils.getGrays()['100'],\n        borderColor: utils.getGrays()['300'],\n        textStyle: { color: utils.getGrays()['1100'] },\n        borderWidth: 1,\n        transitionDuration: 0,\n        axisPointer: {\n          type: 'none'\n        }\n      }\n    });\n\n    echartSetOption(chart, userOptions, getDefaultOptions);\n\n    utils.resize(() => {\n      if (window.innerWidth < 530) {\n        chart.setOption({\n          series: [\n            {\n              center: ['65%', '55%']\n            }\n          ]\n        });\n      } else {\n        chart.setOption({ series: [{ center: ['50%', '55%'] }] });\n      }\n    });\n  }\n};\n\nexport default echartsDoughnutRoundedChartInit;\n","import utils from '../../../utils';\nimport { echartSetOption, tooltipFormatter } from '../echarts-utils';\n\n/* -------------------------------------------------------------------------- */\n/*                           Echarts Dynamic Line Chart                       */\n/* -------------------------------------------------------------------------- */\n\nconst echartsDynamicLineChartInit = () => {\n  const $dynamicLineChartEl = document.querySelector(\n    '.echart-dynamic-line-chart-example'\n  );\n\n  if ($dynamicLineChartEl) {\n    // Get options from data attribute\n    const userOptions = utils.getData($dynamicLineChartEl, 'options');\n    const chart = window.echarts.init($dynamicLineChartEl);\n\n    const data = [];\n    let now = +new Date(1997, 9, 3);\n    const oneDay = 24 * 3600 * 1000;\n    let value = Math.random() * 1000;\n\n    const randomData = () => {\n      now = new Date(+now + oneDay);\n      value = value + Math.random() * 21 - 10;\n      return {\n        name: now.toString(),\n        value: [\n          [now.getFullYear(), now.getMonth() + 1, now.getDate()].join('/'),\n          Math.round(value)\n        ]\n      };\n    };\n\n    for (let i = 0; i < 1000; i += 1) {\n      data.push(randomData());\n    }\n\n    const getDefaultOptions = () => ({\n      tooltip: {\n        trigger: 'axis',\n        axisPointer: {\n          animation: false\n        },\n        padding: [7, 10],\n        backgroundColor: utils.getGrays()['100'],\n        borderColor: utils.getGrays()['300'],\n        textStyle: { color: utils.getGrays()['1100'] },\n        borderWidth: 1,\n        transitionDuration: 0,\n        formatter: tooltipFormatter\n      },\n      xAxis: {\n        type: 'time',\n        splitLine: {\n          show: false\n        },\n        axisLabel: {\n          color: utils.getGrays()['500']\n        },\n\n        axisLine: {\n          lineStyle: {\n            color: utils.getGrays()['300']\n          }\n        },\n        axisPointer: {\n          lineStyle: {\n            color: utils.getGrays()['300']\n          }\n        }\n      },\n      yAxis: {\n        type: 'value',\n        boundaryGap: [0, '100%'],\n        splitLine: {\n          show: false\n        },\n        axisLabel: {\n          color: utils.getGrays()['500']\n        }\n      },\n      series: [\n        {\n          name: 'Total',\n          type: 'line',\n          showSymbol: false,\n          hoverAnimation: false,\n          data,\n          lineStyle: {\n            color: utils.getColor('primary')\n          },\n          itemStyle: {\n            color: utils.getGrays()['100'],\n            borderColor: utils.getColor('primary'),\n            borderWidth: 2\n          },\n          symbol: 'circle',\n          symbolSize: 10\n        }\n      ],\n      grid: {\n        right: 5, left: '7%', bottom: '10%', top: '5%'\n      }\n    });\n\n    echartSetOption(chart, userOptions, getDefaultOptions);\n\n    setInterval(() => {\n      for (let i = 0; i < 5; i += 1) {\n        data.shift();\n        data.push(randomData());\n      }\n\n      chart.setOption({\n        series: [\n          {\n            data\n          }\n        ]\n      });\n    }, 1000);\n  }\n};\n\nexport default echartsDynamicLineChartInit;\n","import utils from '../../../utils';\nimport { echartSetOption } from '../echarts-utils';\n\n/* -------------------------------------------------------------------------- */\n/*                          Echarts Gauge Progress Chart                      */\n/* -------------------------------------------------------------------------- */\n\nconst echartsGaugeGradeChartInit = () => {\n  const $gaugeGradeChartEl = document.querySelector('.echart-gauge-grade-chart-example');\n\n  if ($gaugeGradeChartEl) {\n    // Get options from data attribute\n    const userOptions = utils.getData($gaugeGradeChartEl, 'options');\n    const chart = window.echarts.init($gaugeGradeChartEl);\n\n    const getDefaultOptions = () => ({\n      series: [\n        {\n          radius: '100%',\n          type: 'gauge',\n          center: ['50%', '70%'],\n          startAngle: 180,\n          endAngle: 0,\n          min: 0,\n          max: 1,\n          splitNumber: 8,\n          axisLine: {\n            lineStyle: {\n              width: 6,\n              color: [\n                [0.25, utils.getColor('danger')],\n                [0.5, utils.getColor('warning')],\n                [0.75, utils.getColor('info')],\n                [1, utils.getColor('success')]\n              ]\n            }\n          },\n          pointer: {\n            icon: 'path://M12.8,0.7l12,40.1H0.7L12.8,0.7z',\n            length: '12%',\n            width: 20,\n            offsetCenter: [0, '-60%'],\n            itemStyle: {\n              color: 'auto'\n            }\n          },\n          axisTick: {\n            length: 12,\n            lineStyle: {\n              color: 'auto',\n              width: 2\n            }\n          },\n          splitLine: {\n            length: 20,\n            lineStyle: {\n              color: 'auto',\n              width: 5\n            }\n          },\n          axisLabel: {\n            color: utils.getGrays()['600'],\n            distance: -60,\n            formatter: value => {\n              if (value === 0.875) {\n                return 'Excellent';\n              }\n              if (value === 0.625) {\n                return 'Good';\n              }\n              if (value === 0.375) {\n                return 'Well';\n              }\n              if (value === 0.125) {\n                return 'Bad';\n              }\n              return '';\n            }\n          },\n          title: {\n            offsetCenter: [0, '-20%'],\n            color: utils.getGrays()['600']\n          },\n          detail: {\n            offsetCenter: [0, '0%'],\n            valueAnimation: true,\n            formatter(value) {\n              return Math.round(value * 100);\n            },\n            color: 'auto'\n          },\n          data: [\n            {\n              value: 0.7,\n              name: 'Grade'\n            }\n          ]\n        }\n      ]\n    });\n\n    echartSetOption(chart, userOptions, getDefaultOptions);\n  }\n};\n\nexport default echartsGaugeGradeChartInit;\n","import utils from '../../../utils';\nimport { echartSetOption } from '../echarts-utils';\n\n/* -------------------------------------------------------------------------- */\n/*                          Echarts Gauge Progress Chart                      */\n/* -------------------------------------------------------------------------- */\n\nconst echartsGaugeMultiRingChartInit = () => {\n  const $gaugeMultiRingChartEl = document.querySelector(\n    '.echart-gauge-multi-ring-chart-example'\n  );\n\n  if ($gaugeMultiRingChartEl) {\n    // Get options from data attribute\n    const userOptions = utils.getData($gaugeMultiRingChartEl, 'options');\n    const chart = window.echarts.init($gaugeMultiRingChartEl);\n\n    const getDefaultOptions = () => ({\n      series: [\n        {\n          type: 'gauge',\n          startAngle: 90,\n          endAngle: -270,\n          radius: '85%',\n          pointer: {\n            show: false,\n          },\n          center: ['50%', '50%'],\n          progress: {\n            show: true,\n            overlap: false,\n            roundCap: true,\n            clip: false,\n            itemStyle: {\n              color: utils.getColor('info'),\n            },\n          },\n          axisLine: {\n            lineStyle: {\n              width: 8,\n              color: [[1, utils.getColor('gray-200')]],\n            },\n          },\n          splitLine: {\n            show: false,\n          },\n          axisTick: {\n            show: false,\n          },\n          axisLabel: {\n            show: false,\n          },\n          data: [79],\n          detail: {\n            show: false,\n          },\n          animationDuration: 2000,\n        },\n        {\n          type: 'gauge',\n          startAngle: 90,\n          endAngle: -270,\n          radius: '70%',\n          pointer: {\n            show: false,\n          },\n          center: ['50%', '50%'],\n          progress: {\n            show: true,\n            overlap: false,\n            roundCap: true,\n            clip: false,\n            itemStyle: {\n              color: utils.getColor('primary'),\n            },\n          },\n          axisLine: {\n            lineStyle: {\n              width: 8,\n              color: [[1, utils.getColor('gray-200')]],\n            },\n          },\n          splitLine: {\n            show: false,\n          },\n          axisTick: {\n            show: false,\n          },\n          axisLabel: {\n            show: false,\n          },\n          data: [85],\n          detail: {\n            show: false,\n          },\n          animationDuration: 2000,\n        },\n        {\n          type: 'gauge',\n          startAngle: 90,\n          endAngle: -270,\n          radius: '55%',\n          pointer: {\n            show: false,\n          },\n          center: ['50%', '50%'],\n          progress: {\n            show: true,\n            overlap: false,\n            roundCap: true,\n            clip: false,\n            itemStyle: {\n              color: utils.getColor('success'),\n            },\n          },\n          axisLine: {\n            lineStyle: {\n              width: 8,\n              color: [[1, utils.getColor('gray-200')]],\n            },\n          },\n          splitLine: {\n            show: false,\n          },\n          axisTick: {\n            show: false,\n          },\n          axisLabel: {\n            show: false,\n          },\n          data: [70],\n          detail: {\n            show: false,\n          },\n          animationDuration: 2000,\n        },\n      ],\n    });\n\n    echartSetOption(chart, userOptions, getDefaultOptions);\n  }\n};\n\nexport default echartsGaugeMultiRingChartInit;\n","import utils from '../../../utils';\nimport { echartSetOption } from '../echarts-utils';\n\n/* -------------------------------------------------------------------------- */\n/*                          Echarts Gauge Progress Chart                      */\n/* -------------------------------------------------------------------------- */\n\nconst echartsGaugeMultiTitleChartInit = () => {\n  const $gaugeMultiTitleChartEl = document.querySelector('.echart-gauge-multi-title-chart-example');\n\n  if ($gaugeMultiTitleChartEl) {\n    // Get options from data attribute\n    const userOptions = utils.getData($gaugeMultiTitleChartEl, 'options');\n    const chart = window.echarts.init($gaugeMultiTitleChartEl);\n\n    const tooltipFormatter = params => `\n      <div>\n          <h6 class=\"fs-10 text-700 mb-0\">\n            <span class=\"fas fa-circle me-1\" style='color:${params[0].color}'></span>\n            ${params[0].name} : ${params[0].value}\n          </h6>\n      </div>\n      `;\n\n    const getDefaultOptions = () => ({\n      tooltip: {\n        trigger: 'axis',\n        padding: [7, 10],\n        backgroundColor: utils.getGrays()['100'],\n        borderColor: utils.getGrays()['300'],\n        textStyle: { color: utils.getGrays()['1100'] },\n        borderWidth: 1,\n        formatter: tooltipFormatter,\n        transitionDuration: 0,\n        axisPointer: {\n          type: 'none'\n        }\n      },\n      series: [\n        {\n          type: 'gauge',\n          radius: '100%',\n          anchor: {\n            show: true,\n            showAbove: true,\n            size: 18,\n            itemStyle: {\n              color: utils.getColor('warning')\n            }\n          },\n\n          progress: {\n            show: true,\n            overlap: true,\n            roundCap: true\n          },\n          axisLine: {\n            roundCap: true\n          },\n          axisTick: {\n            show: false\n          },\n          splitLine: {\n            lineStyle: {\n              width: 2,\n              color: utils.getGrays()['600']\n            }\n          },\n          axisLabel: {\n            distance: 25,\n            color: utils.getGrays()['600']\n          },\n          data: [\n            {\n              value: 20,\n              name: 'Perfect',\n              title: {\n                offsetCenter: ['-40%', '80%']\n              },\n              detail: {\n                offsetCenter: ['-40%', '95%']\n              },\n              itemStyle: {\n                color: utils.getColor('primary')\n              }\n            },\n            {\n              value: 40,\n              name: 'Good',\n              title: {\n                offsetCenter: ['0%', '80%']\n              },\n              detail: {\n                offsetCenter: ['0%', '95%']\n              },\n\n              itemStyle: {\n                color: utils.getColor('success')\n              }\n            },\n            {\n              value: 60,\n              name: 'Commonly',\n              title: {\n                offsetCenter: ['40%', '80%']\n              },\n              detail: {\n                offsetCenter: ['40%', '95%']\n              },\n\n              itemStyle: {\n                color: utils.getColor('warning')\n              }\n            }\n          ],\n          title: {\n            fontSize: 14,\n            color: utils.getGrays()['600']\n          },\n          detail: {\n            width: 40,\n            height: 14,\n            fontSize: 14,\n            color: '#fff',\n            backgroundColor: 'auto',\n            borderRadius: 3,\n            formatter: '{value}%'\n          }\n        }\n      ]\n    });\n\n    echartSetOption(chart, userOptions, getDefaultOptions);\n  }\n};\n\nexport default echartsGaugeMultiTitleChartInit;\n","import utils from '../../../utils';\nimport { echartSetOption } from '../echarts-utils';\n\n/* -------------------------------------------------------------------------- */\n/*                          Echarts Gauge Progress Chart                      */\n/* -------------------------------------------------------------------------- */\n\nconst echartsGaugeProgressChartInit = () => {\n  const $gaugeProgressChartEl = document.querySelector('.echart-gauge-progress-chart-example');\n\n  if ($gaugeProgressChartEl) {\n    // Get options from data attribute\n    const userOptions = utils.getData($gaugeProgressChartEl, 'options');\n    const chart = window.echarts.init($gaugeProgressChartEl);\n\n    const tooltipFormatter = params => `\n      <div>\n          <h6 class=\"fs-10 text-700 mb-0\">\n            <span class=\"fas fa-circle me-1\" style='color:${params[0].color}'></span>\n            ${params[0].name} : ${params[0].value}\n          </h6>\n      </div>\n      `;\n\n    const getDefaultOptions = () => ({\n      tooltip: {\n        trigger: 'axis',\n        padding: [7, 10],\n        backgroundColor: utils.getGrays()['100'],\n        borderColor: utils.getGrays()['300'],\n        textStyle: { color: utils.getGrays()['1100'] },\n        borderWidth: 1,\n        formatter: tooltipFormatter,\n        transitionDuration: 0,\n        axisPointer: {\n          type: 'none'\n        }\n      },\n      series: [\n        {\n          type: 'gauge',\n          center: ['50%', '60%'],\n          radius: '100%',\n          startAngle: 180,\n          endAngle: 0,\n          progress: {\n            show: true,\n            width: 18,\n            itemStyle: {\n              color: utils.getColor('info')\n            }\n          },\n          itemStyle: {\n            color: utils.getColor('info'),\n            shadowColor: utils.rgbaColor(utils.getColor('primary'), 0.5),\n            shadowBlur: 10,\n            shadowOffsetX: 2,\n            shadowOffsetY: 2\n          },\n          axisLine: {\n            lineStyle: {\n              width: 18\n            }\n          },\n          axisTick: {\n            show: false\n          },\n          splitLine: {\n            lineStyle: {\n              width: 2,\n              color: utils.getGrays()['600']\n            }\n          },\n          axisLabel: {\n            distance: 25,\n            color: utils.getGrays()['600']\n          },\n          anchor: {\n            show: true,\n            showAbove: true,\n            size: 25,\n            itemStyle: {\n              color: utils.getColor('info')\n            }\n          },\n          title: {\n            show: false\n          },\n          detail: {\n            valueAnimation: true,\n            fontSize: 80,\n            offsetCenter: [0, '70%']\n          },\n          data: [\n            {\n              value: 70,\n              detail: {\n                fontSize: 30,\n                color: utils.getGrays()['600'],\n                offsetCenter: [0, '40%']\n              }\n            }\n          ]\n        }\n      ]\n    });\n\n    echartSetOption(chart, userOptions, getDefaultOptions);\n  }\n};\n\nexport default echartsGaugeProgressChartInit;\n","import utils from '../../../utils';\nimport { echartSetOption } from '../echarts-utils';\n\n/* -------------------------------------------------------------------------- */\n/*                          Echarts Gauge Progress Chart                      */\n/* -------------------------------------------------------------------------- */\n\nconst echartsGaugeRingChartInit = () => {\n  const $gaugeRingChartEl = document.querySelector('.echart-gauge-ring-chart-example');\n\n  if ($gaugeRingChartEl) {\n    // Get options from data attribute\n    const userOptions = utils.getData($gaugeRingChartEl, 'options');\n    const chart = window.echarts.init($gaugeRingChartEl);\n\n    const tooltipFormatter = params => `\n      <div>\n          <h6 class=\"fs-10 text-700 mb-0\">\n            <span class=\"fas fa-circle me-1\" style='color:${params[0].color}'></span>\n            ${params[0].name} : ${params[0].value}\n          </h6>\n      </div>\n      `;\n\n    const getDefaultOptions = () => ({\n      tooltip: {\n        trigger: 'axis',\n        padding: [7, 10],\n        backgroundColor: utils.getGrays()['100'],\n        borderColor: utils.getGrays()['300'],\n        textStyle: { color: utils.getGrays()['1100'] },\n        borderWidth: 1,\n        formatter: tooltipFormatter,\n        transitionDuration: 0,\n        axisPointer: {\n          type: 'none'\n        }\n      },\n      series: [\n        {\n          type: 'gauge',\n          radius: '100%',\n          startAngle: 90,\n          endAngle: -270,\n          pointer: {\n            show: false\n          },\n          progress: {\n            show: true,\n            overlap: false,\n            roundCap: true,\n            clip: false,\n            itemStyle: {\n              borderWidth: 1,\n              borderColor: utils.getGrays()['500']\n            }\n          },\n          axisLine: {\n            lineStyle: {\n              width: 18\n            }\n          },\n          splitLine: {\n            show: false,\n            distance: 0,\n            length: 10\n          },\n          axisTick: {\n            show: false\n          },\n          axisLabel: {\n            show: false,\n            distance: 50\n          },\n          data: [\n            {\n              value: 80,\n              title: {\n                offsetCenter: ['0%', '0%']\n              },\n              detail: {\n                offsetCenter: ['0%', '0%']\n              },\n              itemStyle: {\n                color: utils.getColor('primary')\n              }\n            }\n          ],\n          title: {\n            fontSize: 14\n          },\n          detail: {\n            width: 50,\n            height: 14,\n            fontSize: 20,\n            color: 'auto',\n            formatter: '{value}%'\n          }\n        }\n      ]\n    });\n\n    echartSetOption(chart, userOptions, getDefaultOptions);\n  }\n};\n\nexport default echartsGaugeRingChartInit;\n","import utils from '../../../utils';\nimport { echartSetOption } from '../echarts-utils';\n\n/* -------------------------------------------------------------------------- */\n/*                       Echarts Gradient Bar Chart                           */\n/* -------------------------------------------------------------------------- */\n\nconst echartsGradientBarChartInit = () => {\n  const $gradientBarChartEl = document.querySelector('.echart-gradient-bar-chart-example');\n\n  if ($gradientBarChartEl) {\n    // Get options from data attribute\n    const userOptions = utils.getData($gradientBarChartEl, 'options');\n    const chart = window.echarts.init($gradientBarChartEl);\n\n    const tooltipFormatter = params => `<div> \n          <h6 class=\"fs-10 text-700 mb-0\">\n          <span class=\"dot me-1 fs-11  bg-primary\" ></span> ${params[0].name} : ${params[0].value} \n           </h6>\n        </div> `;\n\n    const dataAxis = [\n      'A',\n      'B',\n      'C',\n      'D',\n      'E',\n      'F',\n      'G',\n      'H',\n      'I',\n      'J',\n      'K',\n      'L',\n      'M',\n      'N',\n      'O',\n      'P',\n      'Q',\n      'R',\n      'S',\n      'T'\n    ];\n    const data = [\n      220, 182, 191, 234, 290, 330, 310, 123, 442, 321, 90, 149, 210, 122, 133, 334, 198, 123, 125,\n      220\n    ];\n\n    const getDefaultOptions = () => ({\n      tooltip: {\n        trigger: 'axis',\n        padding: [7, 10],\n        backgroundColor: utils.getGrays()['100'],\n        borderColor: utils.getGrays()['300'],\n        textStyle: { color: utils.getGrays()['1100'] },\n        borderWidth: 1,\n        transitionDuration: 0,\n        axisPointer: {\n          type: 'none'\n        },\n        formatter: tooltipFormatter\n      },\n      title: {\n        text: 'Gradient and Clickable bar chart',\n        textStyle: {\n          color: utils.getGrays()['600']\n        },\n        left: 'center'\n      },\n      xAxis: {\n        data: dataAxis,\n        axisLabel: {\n          inside: true,\n          textStyle: {\n            color: '#fff'\n          }\n        },\n        axisTick: {\n          show: false\n        },\n        axisLine: {\n          show: false\n        },\n        z: 10\n      },\n      yAxis: {\n        axisLine: {\n          show: false\n        },\n        axisTick: {\n          show: false\n        },\n        axisLabel: {\n          textStyle: {\n            color: utils.getGrays()['600']\n          }\n        },\n        splitLine: {\n          show: true,\n          lineStyle: {\n            color: utils.getColor()['300']\n          }\n        }\n      },\n      dataZoom: [\n        {\n          type: 'inside'\n        }\n      ],\n      series: [\n        {\n          type: 'bar',\n          name: 'Total',\n          showBackground: true,\n          itemStyle: {\n            color: new window.echarts.graphic.LinearGradient(0, 0, 0, 1, [\n              { offset: 0, color: utils.getColor('info') },\n              { offset: 0.5, color: utils.getColor('primary') },\n              { offset: 1, color: utils.getColor('primary') }\n            ]),\n            barBorderRadius: [3, 3, 0, 0]\n          },\n          emphasis: {\n            itemStyle: {\n              color: new window.echarts.graphic.LinearGradient(0, 0, 0, 1, [\n                { offset: 0, color: utils.getColor('primary') },\n                { offset: 0.7, color: utils.getColor('primary') },\n                { offset: 1, color: utils.getColor('info') }\n              ])\n            }\n          },\n          data\n        }\n      ],\n      grid: {\n        right: 5,\n        left: 5,\n        bottom: 5,\n        top: '10%',\n        containLabel: true\n      }\n    });\n\n    echartSetOption(chart, userOptions, getDefaultOptions);\n\n    const zoomSize = 6;\n    chart.on('click', params => {\n      chart.dispatchAction({\n        type: 'dataZoom',\n        startValue: dataAxis[Math.max(params.dataIndex - zoomSize / 2, 0)],\n        endValue: dataAxis[Math.min(params.dataIndex + zoomSize / 2, data.length - 1)]\n      });\n    });\n  }\n};\n\nexport default echartsGradientBarChartInit;\n","import utils from '../../../utils';\nimport { echartSetOption } from '../echarts-utils';\n\n/* -------------------------------------------------------------------------- */\n/*                                Market Share                                */\n/* -------------------------------------------------------------------------- */\n\nconst echartsHeatMapChartInit = () => {\n  const ECHART_HEATMAP_CHART = '.echart-heatmap-chart-example';\n  const $echartHeatmapChart = document.querySelector(ECHART_HEATMAP_CHART);\n  const hours = ['12a', '2a', '4a', '6a', '8a', '10a', '12p', '2p', '4p', '6p', '8p', '10p'];\n  const days = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday'];\n\n  const data = [];\n  for (let i = 0; i < 7; i += 1) {\n    for (let j = 0; j < 12; j += 1) {\n      data.push([j, i, utils.getRandomNumber(5, 12)]);\n    }\n  }\n\n  if ($echartHeatmapChart) {\n    const userOptions = utils.getData($echartHeatmapChart, 'options');\n    const chart = window.echarts.init($echartHeatmapChart);\n\n    const getDefaultOptions = () => ({\n      tooltip: {\n        position: 'top',\n        padding: [7, 10],\n        backgroundColor: utils.getGrays()['100'],\n        borderColor: utils.getGrays()['300'],\n        textStyle: { color: utils.getGrays()['1100'] },\n        borderWidth: 1\n      },\n      grid: {\n        right: 5,\n        left: 5,\n        top: 5,\n        bottom: '15%',\n        containLabel: true\n      },\n      xAxis: {\n        type: 'category',\n        data: hours,\n        splitArea: {\n          show: true\n        },\n        axisLabel: {\n          color: utils.getGrays()['600']\n        },\n        axisLine: {\n          show: true,\n          lineStyle: {\n            color: utils.getGrays()['400']\n          }\n        }\n      },\n      yAxis: {\n        type: 'category',\n        data: days,\n        axisLabel: {\n          formatter: value => value.substring(0, 3),\n          color: utils.getGrays()['600']\n        },\n        splitArea: {\n          show: true\n        },\n        axisLine: {\n          show: true,\n          lineStyle: {\n            color: utils.getGrays()['400']\n          }\n        }\n      },\n      visualMap: {\n        min: 0,\n        max: 10,\n        calculable: true,\n        orient: 'horizontal',\n        left: 'center',\n        bottom: '0%',\n        textStyle: {\n          color: utils.getGrays()['600'],\n          fontWeight: 500\n        },\n        inRange: {\n          color: [\n            utils.rgbaColor(utils.getColors().primary, 1),\n            utils.rgbaColor(utils.getColors().info, 1),\n            utils.rgbaColor(utils.getColors().success, 1)\n            // utils.rgbaColor(utils.getColors()['warning'], 1),\n            // utils.rgbaColor(utils.getColors()['danger'], 1)\n          ]\n        }\n      },\n      series: [\n        {\n          type: 'heatmap',\n          data,\n          label: {\n            show: true\n          },\n          emphasis: {\n            itemStyle: {\n              shadowBlur: 10,\n              shadowColor: utils.rgbaColor(utils.getColors().emphasis, 0.5)\n            }\n          }\n        }\n      ]\n    });\n\n    echartSetOption(chart, userOptions, getDefaultOptions);\n  }\n};\n\nexport default echartsHeatMapChartInit;\n","import utils from '../../../utils';\nimport { echartSetOption } from '../echarts-utils';\n\n/* -------------------------------------------------------------------------- */\n/*                                Market Share                                */\n/* -------------------------------------------------------------------------- */\n\nconst echartsHeatMapSingleSeriesChartInit = () => {\n  const ECHART_HEATMAP_CHART = '.echart-heatmap-single-series-chart';\n  const $echartHeatmapChart = document.querySelector(ECHART_HEATMAP_CHART);\n  const hours = ['12a', '2a', '4a', '6a', '8a', '10a', '12p', '2p', '4p', '6p', '8p', '10p'];\n  const days = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday'];\n\n  const data = [];\n  for (let i = 0; i < 7; i += 1) {\n    for (let j = 0; j < 12; j += 1) {\n      data.push([j, i, utils.getRandomNumber(1, 12)]);\n    }\n  }\n\n  if ($echartHeatmapChart) {\n    const userOptions = utils.getData($echartHeatmapChart, 'options');\n    const chart = window.echarts.init($echartHeatmapChart);\n\n    const getDefaultOptions = () => ({\n      gradientColor: [\n        utils.rgbaColor(utils.getColors().info, 1),\n        utils.rgbaColor(utils.getColors().primary, 1)\n      ],\n\n      tooltip: {\n        position: 'top',\n        padding: [7, 10],\n        backgroundColor: utils.getGrays()['100'],\n        borderColor: utils.getGrays()['300'],\n        textStyle: { color: utils.getGrays()['1100'] },\n        borderWidth: 1\n      },\n      grid: {\n        right: 5,\n        left: 5,\n        top: 5,\n        bottom: 5,\n        containLabel: true\n      },\n      xAxis: {\n        axisTick: { show: false },\n        type: 'category',\n        data: hours,\n        splitArea: {\n          show: true\n        },\n        axisLabel: {\n          color: utils.getGrays()['600']\n        },\n        axisLine: {\n          show: true,\n          lineStyle: {\n            color: utils.getGrays()['400']\n          }\n        }\n      },\n      yAxis: {\n        axisTick: { show: false },\n        type: 'category',\n        data: days,\n        axisLabel: {\n          formatter: value => value.substring(0, 3),\n          color: utils.getGrays()['600']\n        },\n        splitArea: {\n          show: true\n        },\n        axisLine: {\n          show: true,\n          lineStyle: {\n            color: utils.getGrays()['400']\n          }\n        }\n      },\n      visualMap: {\n        show: false,\n        min: 0,\n        max: 10,\n        calculable: true,\n        orient: 'horizontal',\n        left: 'center',\n        bottom: '0%',\n        textStyle: {\n          color: utils.getGrays()['600'],\n          fontWeight: 500\n        }\n      },\n\n      series: [\n        {\n          type: 'heatmap',\n          data,\n          label: {\n            show: true\n          },\n          itemStyle: {\n            borderColor: utils.getGrays()['100'],\n            borderWidth: 3\n          },\n          emphasis: {\n            itemStyle: {\n              shadowBlur: 10,\n              shadowColor: utils.rgbaColor(utils.getColors().emphasis, 0.5)\n            }\n          }\n        }\n      ]\n    });\n\n    echartSetOption(chart, userOptions, getDefaultOptions);\n  }\n};\n\nexport default echartsHeatMapSingleSeriesChartInit;\n","import utils from '../../../utils';\nimport { echartSetOption, tooltipFormatter } from '../echarts-utils';\n\n/* -------------------------------------------------------------------------- */\n/*                       Echarts Horizontal Bar Chart                         */\n/* -------------------------------------------------------------------------- */\n\nconst echartsHorizontalBarChartInit = () => {\n  const $horizontalBarChartEl = document.querySelector('.echart-horizontal-bar-chart-example');\n\n  if ($horizontalBarChartEl) {\n    // Get options from data attribute\n    const userOptions = utils.getData($horizontalBarChartEl, 'options');\n    const chart = window.echarts.init($horizontalBarChartEl);\n\n    const months = [\n      'January',\n      'February',\n      'March',\n      'April',\n      'May',\n      'June',\n      'July',\n      'August',\n      'September',\n      'October',\n      'November',\n      'December'\n    ];\n\n    const data = [1272, 1301, 1402, 1216, 1086, 1236, 1219, 1330, 1367, 1416, 1297, 1204];\n\n    const getDefaultOptions = () => ({\n      tooltip: {\n        trigger: 'axis',\n        padding: [7, 10],\n        backgroundColor: utils.getGrays()['100'],\n        borderColor: utils.getGrays()['300'],\n        textStyle: { color: utils.getGrays()['1100'] },\n        borderWidth: 1,\n        formatter: tooltipFormatter,\n        transitionDuration: 0,\n        axisPointer: {\n          type: 'none'\n        }\n      },\n      xAxis: {\n        type: 'value',\n        boundaryGap: false,\n        axisLine: {\n          show: true,\n          lineStyle: {\n            color: utils.getGrays()['300']\n          }\n        },\n        axisTick: { show: true },\n        axisLabel: {\n          color: utils.getGrays()['500']\n        },\n        splitLine: {\n          show: false\n        },\n        min: 600\n      },\n      yAxis: {\n        type: 'category',\n        data: months,\n        boundaryGap: true,\n        axisLabel: {\n          formatter: value => value.substring(0, 3),\n          show: true,\n          color: utils.getGrays()['500'],\n          margin: 15\n        },\n        splitLine: {\n          show: true,\n          lineStyle: {\n            color: utils.getGrays()['200']\n          }\n        },\n        axisTick: { show: false },\n        axisLine: {\n          lineStyle: {\n            color: utils.getGrays()['300']\n          }\n        }\n      },\n      series: [\n        {\n          type: 'bar',\n          name: 'Total',\n          data,\n          lineStyle: { color: utils.getColor('primary') },\n          itemStyle: {\n            color: utils.getColor('primary'),\n            barBorderRadius: [0, 3, 3, 0]\n          },\n          showSymbol: false,\n          symbol: 'circle',\n          smooth: false,\n          hoverAnimation: true\n        }\n      ],\n      grid: { right: '3%', left: '10%', bottom: '10%', top: '5%' }\n    });\n\n    echartSetOption(chart, userOptions, getDefaultOptions);\n  }\n};\n\nexport default echartsHorizontalBarChartInit;\n","import utils from '../../../utils';\nimport { echartSetOption } from '../echarts-utils';\n\n/* -------------------------------------------------------------------------- */\n/*                             Echarts Line Chart                             */\n/* -------------------------------------------------------------------------- */\n\nconst echartsLineAreaChartInit = () => {\n  const $lineAreaChartEl = document.querySelector('.echart-line-area-chart-example');\n\n  if ($lineAreaChartEl) {\n    // Get options from data attribute\n    const userOptions = utils.getData($lineAreaChartEl, 'options');\n    const chart = window.echarts.init($lineAreaChartEl);\n\n    const months = [\n      'January',\n      'February',\n      'March',\n      'April',\n      'May',\n      'June',\n      'July',\n      'August',\n      'September',\n      'October',\n      'November',\n      'December'\n    ];\n\n    const data = [1142, 1160, 1179, 946, 1420, 1434, 986, 1247, 1051, 1297, 927, 1282];\n\n    const tooltipFormatter = params => `\n      <div>\n          <h6 class=\"fs-10 text-700 mb-0\">\n            <span class=\"fas fa-circle me-1\" style='color:${params[0].borderColor}'></span>\n            ${params[0].name} : ${params[0].value}\n          </h6>\n      </div>\n      `;\n\n    const getDefaultOptions = () => ({\n      tooltip: {\n        trigger: 'axis',\n        padding: [7, 10],\n        backgroundColor: utils.getGrays()['100'],\n        borderColor: utils.getGrays()['300'],\n        textStyle: { color: utils.getGrays()['1100'] },\n        borderWidth: 1,\n        formatter: tooltipFormatter,\n        transitionDuration: 0,\n        axisPointer: {\n          type: 'none'\n        }\n      },\n      xAxis: {\n        type: 'category',\n        data: months,\n        boundaryGap: false,\n        axisLine: {\n          lineStyle: {\n            color: utils.getGrays()['300'],\n            type: 'solid'\n          }\n        },\n        axisTick: { show: false },\n        axisLabel: {\n          color: utils.getGrays()['400'],\n          formatter: value => value.substring(0, 3),\n          margin: 15\n        },\n        splitLine: {\n          show: false\n        }\n      },\n      yAxis: {\n        type: 'value',\n        splitLine: {\n          lineStyle: {\n            color: utils.getGrays()['200']\n          }\n        },\n        boundaryGap: false,\n        axisLabel: {\n          show: true,\n          color: utils.getGrays()['400'],\n          margin: 15\n        },\n        axisTick: { show: false },\n        axisLine: { show: false },\n        min: 600\n      },\n      series: [\n        {\n          type: 'line',\n          data,\n          itemStyle: {\n            color: utils.getGrays()['100'],\n            borderColor: utils.getColor('primary'),\n            borderWidth: 2\n          },\n          lineStyle: {\n            color: utils.getColor('primary')\n          },\n          showSymbol: false,\n          symbolSize: 10,\n          symbol: 'circle',\n          smooth: false,\n          hoverAnimation: true,\n          areaStyle: {\n            color: {\n              type: 'linear',\n              x: 0,\n              y: 0,\n              x2: 0,\n              y2: 1,\n              colorStops: [\n                {\n                  offset: 0,\n                  color: utils.rgbaColor(utils.getColors().primary, 0.5)\n                },\n                {\n                  offset: 1,\n                  color: utils.rgbaColor(utils.getColors().primary, 0)\n                }\n              ]\n            }\n          }\n        }\n      ],\n      grid: {\n        right: '3%',\n        left: '10%',\n        bottom: '10%',\n        top: '5%'\n      }\n    });\n\n    echartSetOption(chart, userOptions, getDefaultOptions);\n  }\n};\n\nexport default echartsLineAreaChartInit;\n","import utils from '../../../utils';\nimport { echartSetOption, tooltipFormatter } from '../echarts-utils';\n\n/* -------------------------------------------------------------------------- */\n/*                             Echarts Line Gradient Chart                    */\n/* -------------------------------------------------------------------------- */\n\nconst echartsLineGradientChartInit = () => {\n  const $lineGradientChartEl = document.querySelector('.echart-line-gradient-chart-example');\n\n  if ($lineGradientChartEl) {\n    // Get options from data attribute\n    const userOptions = utils.getData($lineGradientChartEl, 'options');\n    const chart = window.echarts.init($lineGradientChartEl);\n\n    const data = [\n      ['2021-06-05', 116],\n      ['2021-06-06', 129],\n      ['2021-06-07', 135],\n      ['2021-06-08', 86],\n      ['2021-06-09', 73],\n      ['2021-06-10', 85],\n      ['2021-06-11', 73],\n      ['2021-06-12', 68],\n      ['2021-06-13', 92],\n      ['2021-06-14', 130],\n      ['2021-06-15', 245],\n      ['2021-06-16', 139],\n      ['2021-06-17', 115],\n      ['2021-06-18', 111],\n      ['2021-06-19', 309],\n      ['2021-06-20', 206],\n      ['2021-06-21', 137],\n      ['2021-06-22', 128],\n      ['2021-06-23', 85],\n      ['2021-06-24', 94],\n      ['2021-06-25', 71],\n      ['2021-06-26', 106],\n      ['2021-06-27', 84],\n      ['2021-06-28', 93],\n      ['2021-06-29', 85],\n      ['2021-06-30', 73],\n      ['2021-07-01', 83],\n      ['2021-07-02', 125],\n      ['2021-07-03', 107],\n      ['2021-07-04', 82],\n      ['2021-07-05', 44],\n      ['2021-07-06', 72],\n      ['2021-07-07', 106],\n      ['2021-07-08', 107],\n      ['2021-07-09', 66],\n      ['2021-07-10', 91],\n      ['2021-07-11', 92],\n      ['2021-07-12', 113],\n      ['2021-07-13', 107],\n      ['2021-07-14', 131],\n      ['2021-07-15', 111],\n      ['2021-07-16', 64],\n      ['2021-07-17', 69],\n      ['2021-07-18', 88],\n      ['2021-07-19', 77],\n      ['2021-07-20', 83],\n      ['2021-07-21', 111],\n      ['2021-07-22', 57],\n      ['2021-07-23', 55],\n      ['2021-07-24', 60]\n    ];\n\n    const dateList = data.map(item => item[0]);\n    const valueList = data.map(item => item[1]);\n\n    const getDefaultOptions = () => ({\n      visualMap: {\n        show: false,\n        type: 'continuous',\n        dimension: 0,\n        min: 0,\n        max: dateList.length - 1,\n        color: [utils.getColor('danger'), utils.getColor('warning')]\n      },\n      tooltip: {\n        trigger: 'axis',\n        padding: [7, 10],\n        backgroundColor: utils.getGrays()['100'],\n        borderColor: utils.getGrays()['300'],\n        textStyle: { color: utils.getGrays()['1100'] },\n        borderWidth: 1,\n        transitionDuration: 0,\n        axisPointer: {\n          type: 'none'\n        },\n        formatter: tooltipFormatter\n      },\n      xAxis: {\n        type: 'category',\n        data: dateList,\n        axisLabel: {\n          formatter: value => window.dayjs(value).format('MMM DD'),\n          color: utils.getGrays()['500'],\n          margin: 15\n        },\n        axisLine: {\n          lineStyle: {\n            color: utils.getGrays()['300'],\n            type: 'solid'\n          }\n        },\n        axisPointer: {\n          lineStyle: {\n            color: utils.getGrays()['300']\n          }\n        }\n      },\n      yAxis: {\n        type: 'value',\n        axisLabel: {\n          show: true,\n          color: utils.getGrays()['500'],\n          margin: 15\n        },\n        splitLine: {\n          lineStyle: {\n            color: utils.getGrays()['200'],\n            type: 'dashed'\n          }\n        }\n      },\n      grid: { right: '3%', left: '8%', bottom: '10%', top: '5%' },\n      series: {\n        name: 'Total',\n        type: 'line',\n        showSymbol: false,\n        symbolSize: 10,\n        symbol: 'circle',\n        data: valueList,\n        itemStyle: {\n          color: utils.getGrays()['100'],\n          borderWidth: 2\n        }\n      }\n    });\n\n    echartSetOption(chart, userOptions, getDefaultOptions);\n  }\n};\n\nexport default echartsLineGradientChartInit;\n","import utils from '../../../utils';\nimport { echartSetOption, tooltipFormatter } from '../echarts-utils';\n\n/* -------------------------------------------------------------------------- */\n/*                           Echarts Line Log Chart                           */\n/* -------------------------------------------------------------------------- */\n\nconst echartsLineLogChartInit = () => {\n  const $lineLogChartEl = document.querySelector('.echart-line-log-chart-example');\n\n  if ($lineLogChartEl) {\n    // Get options from data attribute\n    const userOptions = utils.getData($lineLogChartEl, 'options');\n    const chart = window.echarts.init($lineLogChartEl);\n\n    const getDefaultOptions = () => ({\n      tooltip: {\n        trigger: 'axis',\n        padding: [7, 10],\n        backgroundColor: utils.getGrays()['100'],\n        borderColor: utils.getGrays()['300'],\n        borderWidth: 1,\n        transitionDuration: 0,\n        axisPointer: {\n          type: 'none'\n        },\n        formatter: tooltipFormatter\n      },\n      xAxis: {\n        type: 'category',\n        axisLine: {\n          lineStyle: {\n            color: utils.getGrays()['300']\n          }\n        },\n        axisLabel: {\n          color: utils.getGrays()['600']\n        },\n        splitLine: { show: false },\n        data: Array.from(Array(10).keys()).map(item => item + 1)\n      },\n      yAxis: {\n        type: 'log',\n        axisLabel: {\n          color: utils.getGrays()['600']\n        },\n        splitLine: {\n          lineStyle: {\n            color: utils.getGrays()['200']\n          }\n        }\n      },\n      series: [\n        {\n          name: 'Index Of 3',\n          type: 'line',\n          data: [1, 3, 9, 27, 81, 247, 741, 2223, 6669],\n          symbolSize: 7,\n          itemStyle: {\n            color: utils.getGrays()['100'],\n            borderColor: utils.getColor('danger'),\n            borderWidth: 2\n          },\n          lineStyle: {\n            color: utils.getColor('danger')\n          },\n          symbol: 'circle'\n        },\n        {\n          name: 'Index of 2',\n          type: 'line',\n          data: [1, 2, 4, 8, 16, 32, 64, 128, 256],\n          symbolSize: 7,\n          itemStyle: {\n            color: utils.getGrays()['100'],\n            borderColor: utils.getColor('success'),\n            borderWidth: 2\n          },\n          lineStyle: {\n            color: utils.getColor('success')\n          },\n          symbol: 'circle'\n        },\n        {\n          name: 'Index of 1/2',\n          type: 'line',\n          data: [1 / 2, 1 / 4, 1 / 8, 1 / 16, 1 / 32, 1 / 64, 1 / 128, 1 / 256, 1 / 512],\n          symbolSize: 7,\n          itemStyle: {\n            color: utils.getGrays()['100'],\n            borderColor: utils.getColor('info'),\n            borderWidth: 2\n          },\n          lineStyle: {\n            color: utils.getColor('info')\n          },\n          symbol: 'circle'\n        }\n      ],\n      grid: {\n        right: 10,\n        left: 5,\n        bottom: 5,\n        top: 10,\n        containLabel: true\n      }\n    });\n\n    echartSetOption(chart, userOptions, getDefaultOptions);\n  }\n};\n\nexport default echartsLineLogChartInit;\n","import utils from '../../../utils';\nimport { getPosition, echartSetOption, tooltipFormatter } from '../echarts-utils';\n\n/* -------------------------------------------------------------------------- */\n/*                        Echarts Line Marker Chart                           */\n/* -------------------------------------------------------------------------- */\n\nconst echartsLineMarkerChartInit = () => {\n  const $lineMarkerChartEl = document.querySelector('.echart-line-marker-chart-example');\n\n  if ($lineMarkerChartEl) {\n    // Get options from data attribute\n    const userOptions = utils.getData($lineMarkerChartEl, 'options');\n    const chart = window.echarts.init($lineMarkerChartEl);\n\n    const days = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday'];\n\n    const getDefaultOptions = () => ({\n      color: [\n        utils.getColor('primary'),\n        utils.getColor('warning')\n        // utils.getColor('danger')\n      ],\n      legend: {\n        data: [\n          {\n            name: 'Max',\n            textStyle: {\n              color: utils.getGrays()['600']\n            }\n          },\n          {\n            name: 'Min',\n            textStyle: {\n              color: utils.getGrays()['600']\n            }\n          }\n        ]\n      },\n      tooltip: {\n        trigger: 'axis',\n        padding: [7, 10],\n        backgroundColor: utils.getGrays()['100'],\n        borderColor: utils.getGrays()['300'],\n        textStyle: { color: utils.getGrays()['1100'] },\n        borderWidth: 1,\n        transitionDuration: 0,\n        position(pos, params, dom, rect, size) {\n          return getPosition(pos, params, dom, rect, size);\n        },\n        axisPointer: {\n          type: 'none'\n        },\n        formatter: tooltipFormatter\n      },\n      xAxis: {\n        type: 'category',\n        data: days,\n        boundaryGap: false,\n        axisLine: {\n          lineStyle: {\n            color: utils.getGrays()['300'],\n            type: 'solid'\n          }\n        },\n        axisTick: { show: false },\n        axisLabel: {\n          formatter: value => value.substring(0, 3),\n          color: utils.getGrays()['400'],\n          margin: 15\n        },\n        splitLine: {\n          show: false\n        }\n      },\n      yAxis: {\n        type: 'value',\n        splitLine: {\n          lineStyle: {\n            color: utils.getGrays()['200']\n          }\n        },\n        boundaryGap: false,\n        axisLabel: {\n          show: true,\n          color: utils.getGrays()['400'],\n          margin: 15\n        },\n        axisTick: { show: false },\n        axisLine: { show: false }\n      },\n      series: [\n        {\n          name: 'Max',\n          type: 'line',\n          data: [10, 11, 13, 11, 12, 9, 12],\n          symbolSize: 10,\n          itemStyle: {\n            color: utils.getGrays()['100'],\n            borderColor: utils.getColor('primary'),\n            borderWidth: 2\n          },\n          lineStyle: {\n            color: utils.getColor('primary')\n          },\n          symbol: 'circle',\n          markPoint: {\n            itemStyle: {\n              color: utils.getColor('primary')\n            },\n            data: [\n              { type: 'max', name: 'Max' },\n              { type: 'min', name: 'Min' }\n            ]\n          },\n          markLine: {\n            lineStyle: {\n              color: utils.getColor('primary')\n            },\n            label: {\n              color: utils.getGrays()['600']\n            },\n            data: [{ type: 'average', name: 'average' }]\n          }\n        },\n        {\n          name: 'Min',\n          type: 'line',\n          data: [1, -2, 2, 5, 3, 2, 0],\n          symbolSize: 10,\n          itemStyle: {\n            color: utils.getGrays()['100'],\n            borderColor: utils.getColor('danger'),\n            borderWidth: 2\n          },\n          lineStyle: {\n            color: utils.getColor('danger')\n          },\n          symbol: 'circle',\n          markPoint: {\n            itemStyle: {\n              color: utils.getColor('danger')\n            },\n            label: {\n              color: '#fff'\n            },\n            data: [{ name: 'Weekly lowest', value: -2, xAxis: 1, yAxis: -1.5 }]\n          },\n          markLine: {\n            lineStyle: {\n              color: utils.getColor('danger')\n            },\n            label: {\n              color: utils.getGrays()['600']\n            },\n            data: [\n              { type: 'average', name: 'average' },\n              [\n                {\n                  symbol: 'none',\n                  x: '90%',\n                  yAxis: 'max'\n                },\n                {\n                  symbol: 'circle',\n                  label: {\n                    position: 'start',\n                    formatter: 'Max'\n                  },\n                  type: 'max',\n                  name: 'Highest point'\n                }\n              ]\n            ]\n          }\n        }\n      ],\n      grid: { right: '8%', left: '5%', bottom: '10%', top: '15%' }\n    });\n\n    echartSetOption(chart, userOptions, getDefaultOptions);\n  }\n};\n\nexport default echartsLineMarkerChartInit;\n","import utils from '../../../utils';\nimport { getPosition, echartSetOption } from '../echarts-utils';\n\n/* -------------------------------------------------------------------------- */\n/*                             Echarts Line Race Chart                        */\n/* -------------------------------------------------------------------------- */\n\nconst echartsLineRaceChartInit = () => {\n  const $lineRaceChartEl = document.querySelector('.echart-line-race-chart-example');\n\n  if ($lineRaceChartEl) {\n    // Get options from data attribute\n    const userOptions = utils.getData($lineRaceChartEl, 'options');\n    const chart = window.echarts.init($lineRaceChartEl);\n\n    const days = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday'];\n\n    const getDefaultOptions = () => ({\n      color: [utils.getColor('primary'), utils.getColor('warning')],\n      legend: {\n        data: [\n          {\n            name: 'Max',\n            textStyle: {\n              color: utils.getGrays()['600']\n            }\n          },\n          {\n            name: 'Min',\n            textStyle: {\n              color: utils.getGrays()['600']\n            }\n          }\n        ]\n      },\n      tooltip: {\n        trigger: 'axis',\n        padding: [7, 10],\n        backgroundColor: utils.getGrays()['100'],\n        borderColor: utils.getGrays()['300'],\n        textStyle: { color: utils.getGrays()['1100'] },\n        borderWidth: 1,\n        // formatter: tooltipFormatter,\n        transitionDuration: 0,\n        position(pos, params, dom, rect, size) {\n          return getPosition(pos, params, dom, rect, size);\n        },\n        axisPointer: {\n          type: 'none'\n        }\n      },\n      xAxis: {\n        type: 'category',\n        data: days,\n        boundaryGap: false,\n        axisLine: {\n          lineStyle: {\n            color: utils.getGrays()['300'],\n            type: 'solid'\n          }\n        },\n        axisTick: { show: false },\n        axisLabel: {\n          formatter: value => value.substring(0, 3),\n          color: utils.getGrays()['400'],\n          margin: 15\n        },\n        splitLine: {\n          show: false\n        }\n      },\n      yAxis: {\n        type: 'value',\n        splitLine: {\n          lineStyle: {\n            color: utils.getGrays()['300']\n          }\n        },\n        boundaryGap: false,\n        axisLabel: {\n          show: true,\n          color: utils.getGrays()['400'],\n          margin: 15\n        },\n        axisTick: { show: false },\n        axisLine: { show: false }\n      },\n      series: [\n        {\n          name: 'Max',\n          type: 'line',\n          data: [10, 11, 13, 11, 12, 9, 12],\n          markPoint: {\n            data: [\n              { type: 'max', name: 'Max' },\n              { type: 'min', name: 'Min' }\n            ]\n          },\n          markLine: {\n            label: {\n              color: utils.getGrays()['600']\n            },\n            data: [{ type: 'average', name: 'average' }]\n          }\n        },\n        {\n          name: 'Min',\n          type: 'line',\n          data: [1, -2, 2, 5, 3, 2, 0],\n          markPoint: {\n            label: {\n              color: '#fff'\n            },\n            data: [{ name: 'Weekly lowest', value: -2, xAxis: 1, yAxis: -1.5 }]\n          },\n          markLine: {\n            label: {\n              color: utils.getGrays()['600']\n            },\n            data: [\n              { type: 'average', name: 'average' },\n              [\n                {\n                  symbol: 'none',\n                  x: '90%',\n                  yAxis: 'max'\n                },\n                {\n                  symbol: 'circle',\n                  label: {\n                    position: 'start',\n                    formatter: 'Max'\n                  },\n                  type: 'max',\n                  name: 'Highest point'\n                }\n              ]\n            ]\n          }\n        }\n      ],\n      grid: { right: '8%', left: '5%', bottom: '10%', top: '15%' }\n    });\n\n    echartSetOption(chart, userOptions, getDefaultOptions);\n  }\n};\n\nexport default echartsLineRaceChartInit;\n","import utils from '../../../utils';\nimport { echartSetOption } from '../echarts-utils';\n\n/* -------------------------------------------------------------------------- */\n/*                    Echarts Line Share Dataset Chart                        */\n/* -------------------------------------------------------------------------- */\n\nconst echartsLineShareDatasetChartInit = () => {\n  const $lineShareChartEl = document.querySelector('.echart-line-share-dataset-chart-example');\n\n  if ($lineShareChartEl) {\n    // Get options from data attribute\n    const userOptions = utils.getData($lineShareChartEl, 'options');\n    const chart = window.echarts.init($lineShareChartEl);\n\n    const getDefaultOptions = () => ({\n      color: [\n        utils.getColor('danger'),\n        utils.getColor('warning'),\n        utils.getColor('info'),\n        utils.getColor('primary')\n      ],\n      legend: {\n        top: 0,\n        textStyle: {\n          color: utils.getGrays()['700']\n        }\n      },\n      tooltip: {\n        trigger: 'axis',\n        showContent: false\n      },\n      dataset: {\n        source: [\n          ['product', '2012', '2013', '2014', '2015', '2016', '2017'],\n          ['Milk Tea', 56.5, 82.1, 88.7, 70.1, 53.4, 85.1],\n          ['Matcha Latte', 51.1, 51.4, 55.1, 53.3, 73.8, 68.7],\n          ['Cheese Cocoa', 40.1, 62.2, 69.5, 36.4, 45.2, 32.5],\n          ['Walnut Brownie', 25.2, 37.1, 41.2, 18, 33.9, 49.1]\n        ]\n      },\n      xAxis: {\n        type: 'category',\n        axisLine: {\n          lineStyle: {\n            color: utils.getGrays()['300']\n          }\n        },\n        axisLabel: {\n          color: utils.getGrays()['600']\n        },\n        axisPointer: {\n          lineStyle: {\n            color: utils.getGrays()['300']\n          }\n        }\n      },\n      yAxis: {\n        gridIndex: 0,\n        axisLabel: {\n          color: utils.getGrays()['600']\n        },\n        splitLine: {\n          lineStyle: {\n            color: utils.getGrays()['200']\n          }\n        }\n      },\n      series: [\n        {\n          type: 'line',\n          smooth: true,\n          seriesLayoutBy: 'row',\n          emphasis: { focus: 'series' },\n          symbolSize: 10,\n          itemStyle: {\n            color: utils.getGrays()['100'],\n            borderColor: utils.getColor('danger'),\n            borderWidth: 2\n          },\n          lineStyle: {\n            color: utils.getColor('danger')\n          },\n          symbol: 'circle'\n        },\n        {\n          type: 'line',\n          smooth: true,\n          seriesLayoutBy: 'row',\n          emphasis: { focus: 'series' },\n          symbolSize: 10,\n          itemStyle: {\n            color: utils.getGrays()['100'],\n            borderColor: utils.getColor('info'),\n            borderWidth: 2\n          },\n          lineStyle: {\n            color: utils.getColor('info')\n          },\n          symbol: 'circle'\n        },\n        {\n          type: 'line',\n          smooth: true,\n          seriesLayoutBy: 'row',\n          emphasis: { focus: 'series' },\n          symbolSize: 10,\n          itemStyle: {\n            color: utils.getGrays()['100'],\n            borderColor: utils.getColor('warning'),\n            borderWidth: 2\n          },\n          lineStyle: {\n            color: utils.getColor('warning')\n          },\n          symbol: 'circle'\n        },\n        {\n          type: 'line',\n          smooth: true,\n          seriesLayoutBy: 'row',\n          emphasis: { focus: 'series' },\n          symbolSize: 10,\n          itemStyle: {\n            color: utils.getGrays()['100'],\n            borderColor: utils.getColor('primary'),\n            borderWidth: 2\n          },\n          lineStyle: {\n            color: utils.getColor('primary')\n          },\n          symbol: 'circle'\n        },\n        {\n          type: 'pie',\n          id: 'pie',\n          radius: '30%',\n          center: ['50%', '28%'],\n          emphasis: { focus: 'data' },\n          label: {\n            formatter: '{b}: {@2012} ({d}%)',\n            color: utils.getGrays()['600']\n          },\n          encode: {\n            itemName: 'product',\n            value: '2012',\n            tooltip: '2012'\n          }\n        }\n      ],\n      grid: {\n        right: 10,\n        left: 5,\n        bottom: 5,\n        top: '55%',\n        containLabel: true\n      }\n    });\n\n    echartSetOption(chart, userOptions, getDefaultOptions);\n\n    chart.on('updateAxisPointer', event => {\n      const xAxisInfo = event.axesInfo[0];\n      if (xAxisInfo) {\n        const dimension = xAxisInfo.value + 1;\n        chart.setOption({\n          series: {\n            id: 'pie',\n            label: {\n              formatter: `{b}: {@[${dimension}]} ({d}%)`\n            },\n            encode: {\n              value: dimension,\n              tooltip: dimension\n            }\n          }\n        });\n      }\n    });\n  }\n};\n\nexport default echartsLineShareDatasetChartInit;\n","import utils from '../../../utils';\nimport { echartSetOption } from '../echarts-utils';\n\n/* -------------------------------------------------------------------------- */\n/*                                Session By Country Map                      */\n/* -------------------------------------------------------------------------- */\n\nconst echartsUsaMapInit = () => {\n  const $usaMapEl = document.querySelector('.echart-map-usa-example');\n\n  const data = [\n    { name: 'Alabama', value: 4822023 },\n    { name: 'Alaska', value: 731449 },\n    { name: 'Arizona', value: 6553255 },\n    { name: 'Arkansas', value: 2949131 },\n    { name: 'California', value: 38041430 },\n    { name: 'Colorado', value: 5187582 },\n    { name: 'Connecticut', value: 3590347 },\n    { name: 'Delaware', value: 917092 },\n    { name: 'District of Columbia', value: 632323 },\n    { name: 'Florida', value: 19317568 },\n    { name: 'Georgia', value: 9919945 },\n    { name: 'Hawaii', value: 1392313 },\n    { name: 'Idaho', value: 1595728 },\n    { name: 'Illinois', value: 12875255 },\n    { name: 'Indiana', value: 6537334 },\n    { name: 'Iowa', value: 3074186 },\n    { name: 'Kansas', value: 2885905 },\n    { name: 'Kentucky', value: 4380415 },\n    { name: 'Louisiana', value: 4601893 },\n    { name: 'Maine', value: 1329192 },\n    { name: 'Maryland', value: 5884563 },\n    { name: 'Massachusetts', value: 6646144 },\n    { name: 'Michigan', value: 9883360 },\n    { name: 'Minnesota', value: 5379139 },\n    { name: 'Mississippi', value: 2984926 },\n    { name: 'Missouri', value: 6021988 },\n    { name: 'Montana', value: 1005141 },\n    { name: 'Nebraska', value: 1855525 },\n    { name: 'Nevada', value: 2758931 },\n    { name: 'New Hampshire', value: 1320718 },\n    { name: 'New Jersey', value: 8864590 },\n    { name: 'New Mexico', value: 2085538 },\n    { name: 'New York', value: 19570261 },\n    { name: 'North Carolina', value: 9752073 },\n    { name: 'North Dakota', value: 699628 },\n    { name: 'Ohio', value: 11544225 },\n    { name: 'Oklahoma', value: 3814820 },\n    { name: 'Oregon', value: 3899353 },\n    { name: 'Pennsylvania', value: 12763536 },\n    { name: 'Rhode Island', value: 1050292 },\n    { name: 'South Carolina', value: 4723723 },\n    { name: 'South Dakota', value: 833354 },\n    { name: 'Tennessee', value: 6456243 },\n    { name: 'Texas', value: 26059203 },\n    { name: 'Utah', value: 2855287 },\n    { name: 'Vermont', value: 626011 },\n    { name: 'Virginia', value: 8185867 },\n    { name: 'Washington', value: 6897012 },\n    { name: 'West Virginia', value: 1855413 },\n    { name: 'Wisconsin', value: 5726398 },\n    { name: 'Wyoming', value: 576412 },\n    { name: 'Puerto Rico', value: 3667084 }\n  ];\n\n  if ($usaMapEl) {\n    const userOptions = utils.getData($usaMapEl, 'options');\n    const chart = window.echarts.init($usaMapEl);\n\n    const getDefaultOptions = () => ({\n      tooltip: {\n        trigger: 'item',\n        padding: [7, 10],\n        backgroundColor: utils.getGrays()['100'],\n        borderColor: utils.getGrays()['300'],\n        textStyle: { color: utils.getGrays()['1100'] },\n        borderWidth: 1,\n        transitionDuration: 0,\n        formatter: params => `<strong>${params.data.name} :</strong> ${params.data.value}`\n      },\n      toolbox: {\n        show: false,\n        feature: {\n          restore: {}\n        }\n      },\n      visualMap: {\n        left: 'right',\n        min: 500000,\n        max: 38000000,\n        inRange: {\n          color: [utils.getColor('primary'), utils.getColor('info')]\n        },\n        text: ['High', 'Low'],\n        calculable: true,\n        textStyle: {\n          color: utils.getGrays()['600']\n        },\n        formatter: value => `${value / 1000}k`\n      },\n      series: [\n        {\n          left: 10,\n          name: 'USA PopEstimates',\n          type: 'map',\n          zoom: 1.2,\n          roam: true,\n          scaleLimit: {\n            min: 1,\n            max: 5\n          },\n          itemStyle: {\n            borderColor: utils.getGrays()['300']\n          },\n          label: {\n            color: '#fff'\n          },\n          map: 'USA',\n          emphasis: {\n            label: {\n              show: true,\n              color: '#fff'\n            },\n\n            itemStyle: {\n              areaColor: utils.getColor('warning')\n            }\n          },\n          data\n        }\n      ]\n    });\n\n    echartSetOption(chart, userOptions, getDefaultOptions);\n    document.querySelector('.usa-map-reset').addEventListener('click', () => {\n      chart.dispatchAction({\n        type: 'restore'\n      });\n    });\n  }\n};\n\nexport default echartsUsaMapInit;\n","import utils from '../../../utils';\nimport { echartSetOption } from '../echarts-utils';\n\n/* -------------------------------------------------------------------------- */\n/*                            Bandwidth Saved                                 */\n/* -------------------------------------------------------------------------- */\n\nconst echartsNestedPiesChartInit = () => {\n  const $echartsNestedPies = document.querySelector('.echarts-nested-pies-chart-example');\n\n  if ($echartsNestedPies) {\n    const userOptions = utils.getData($echartsNestedPies, 'options');\n    const chart = window.echarts.init($echartsNestedPies);\n\n    const marketingExpenses = [\n      {\n        value: 412600,\n        name: 'Offline Marketing',\n        itemStyle: { color: utils.getColor('primary') },\n        label: {\n          rich: {\n            per: {\n              color: '#1C4F93'\n            }\n          }\n        }\n      },\n      {\n        value: 641500,\n        name: 'Digital Marketing',\n        itemStyle: {\n          color: utils.rgbaColor(utils.getColor('info'), 0.35)\n        },\n        label: {\n          rich: {\n            per: {\n              color: '#1978A2'\n            }\n          }\n        }\n      }\n    ];\n\n    const detailedExpenses = [\n      {\n        value: 91600,\n        name: 'Event Sponsorship',\n        itemStyle: {\n          color: utils.rgbaColor(utils.getColor('primary'), 0.4)\n        }\n      },\n      {\n        value: 183000,\n        name: 'Outrich Event',\n        itemStyle: {\n          color: utils.rgbaColor(utils.getColor('primary'), 0.6)\n        }\n      },\n      {\n        value: 138000,\n        name: 'Ad Campaign',\n        itemStyle: {\n          color: utils.rgbaColor(utils.getColor('primary'), 0.8)\n        }\n      },\n      {\n        value: 183000,\n        name: 'Social Media',\n        itemStyle: {\n          color: utils.rgbaColor(utils.getColor('info'), 0.2)\n        }\n      },\n      {\n        value: 45900,\n        name: 'Google Ads',\n        itemStyle: {\n          color: utils.rgbaColor(utils.getColor('info'), 0.35)\n        }\n      },\n      {\n        value: 138000,\n        name: 'Influencer Marketing',\n        itemStyle: {\n          color: utils.rgbaColor(utils.getColor('info'), 0.5)\n        }\n      },\n      {\n        value: 183000,\n        name: 'Email Marketing',\n        itemStyle: {\n          color: utils.rgbaColor(utils.getColor('info'), 0.7)\n        }\n      },\n      {\n        value: 91600,\n        name: 'Generate Backlinks',\n        itemStyle: {\n          color: utils.rgbaColor(utils.getColor('info'), 0.8)\n        }\n      }\n    ];\n\n    const getDefaultOptions = () => ({\n      tooltip: {\n        trigger: 'item',\n        backgroundColor: utils.getGrays()['100'],\n        textStyle: { color: utils.getGrays()['1100'] },\n        formatter: '{b}<br/> {c} ({d}%)'\n      },\n      series: [\n        {\n          name: 'Marketing Expenses',\n          type: 'pie',\n          selectedMode: 'single',\n          radius: ['45%', '60%'],\n          label: {\n            show: false\n          },\n          labelLine: {\n            show: false\n          },\n          itemStyle: {\n            borderColor: utils.getColor('gray-100'),\n            borderWidth: 2\n          },\n\n          data: detailedExpenses\n        },\n        {\n          name: 'Marketing Expenses',\n          type: 'pie',\n          radius: ['70%', '75%'],\n          barWidth: 10,\n          labelLine: {\n            length: 0,\n            show: false\n          },\n          label: {\n            formatter: '{per|{d}%}',\n            rich: {\n              per: {\n                fontSize: 14,\n                fontWeight: 'bold',\n                lineHeight: 33\n              }\n            }\n          },\n          data: marketingExpenses\n        }\n      ]\n    });\n\n    const initChart = () => {\n      if (utils.isScrolledIntoView($echartsNestedPies)) {\n        echartSetOption(chart, userOptions, getDefaultOptions);\n        window.removeEventListener('scroll', initChart);\n      }\n    };\n\n    window.addEventListener('scroll', initChart);\n  }\n};\n\nexport default echartsNestedPiesChartInit;\n","import utils from '../../../utils';\nimport { echartSetOption } from '../echarts-utils';\n\n/* -------------------------------------------------------------------------- */\n/*                             Echarts Pie Chart                              */\n/* -------------------------------------------------------------------------- */\n\nconst echartsPieChartInit = () => {\n  const $pieChartEl = document.querySelector('.echart-pie-chart-example');\n\n  if ($pieChartEl) {\n    // Get options from data attribute\n    const userOptions = utils.getData($pieChartEl, 'options');\n    const chart = window.echarts.init($pieChartEl);\n\n    const getDefaultOptions = () => ({\n      legend: {\n        left: 'left',\n        textStyle: {\n          color: utils.getGrays()['600']\n        }\n      },\n      series: [\n        {\n          type: 'pie',\n          radius: window.innerWidth < 530 ? '45%' : '60%',\n          label: {\n            color: utils.getGrays()['700']\n          },\n          center: ['50%', '55%'],\n          data: [\n            {\n              value: 1048,\n              name: 'Facebook',\n              itemStyle: {\n                color: utils.getColor('primary')\n              }\n            },\n            {\n              value: 735,\n              name: 'Youtube',\n              itemStyle: {\n                color: utils.getColor('danger')\n              }\n            },\n            {\n              value: 580,\n              name: 'Twitter',\n              itemStyle: {\n                color: utils.getColor('info')\n              }\n            },\n            {\n              value: 484,\n              name: 'Linkedin',\n              itemStyle: {\n                color: utils.getColor('success')\n              }\n            },\n            {\n              value: 300,\n              name: 'Github',\n              itemStyle: {\n                color: utils.getColor('warning')\n              }\n            }\n          ],\n          emphasis: {\n            itemStyle: {\n              shadowBlur: 10,\n              shadowOffsetX: 0,\n              shadowColor: utils.rgbaColor(utils.getGrays()['600'], 0.5)\n            }\n          }\n        }\n      ],\n      tooltip: {\n        trigger: 'item',\n        padding: [7, 10],\n        backgroundColor: utils.getGrays()['100'],\n        borderColor: utils.getGrays()['300'],\n        textStyle: { color: utils.getGrays()['1100'] },\n        borderWidth: 1,\n        transitionDuration: 0,\n        axisPointer: {\n          type: 'none'\n        }\n      }\n    });\n\n    echartSetOption(chart, userOptions, getDefaultOptions);\n\n    //- set chart radius on window resize\n    utils.resize(() => {\n      if (window.innerWidth < 530) {\n        chart.setOption({\n          series: [\n            {\n              radius: '45%'\n            }\n          ]\n        });\n      } else {\n        chart.setOption({\n          series: [\n            {\n              radius: '60%'\n            }\n          ]\n        });\n      }\n    });\n  }\n};\n\nexport default echartsPieChartInit;\n","import utils from '../../../utils';\nimport { echartSetOption } from '../echarts-utils';\n\n/* -------------------------------------------------------------------------- */\n/*                             Echarts Doughnut Chart                         */\n/* -------------------------------------------------------------------------- */\n\nconst echartsPieEdgeAlignChartInit = () => {\n  const $echartPieAEdgeAlignChartEl = document.querySelector('.echart-pie-edge-align-chart');\n\n  const data = [\n    {\n      value: 800,\n      name: 'Starter',\n      itemStyle: {\n        color: utils.rgbaColor(utils.getColors().primary, 0.5)\n      }\n    },\n    {\n      value: 1048,\n      name: 'Starter Pro',\n      itemStyle: {\n        color: utils.getColor('danger')\n      }\n    },\n    {\n      value: 735,\n      name: 'Basic',\n      itemStyle: {\n        color: utils.getColor('primary')\n      }\n    },\n    {\n      value: 580,\n      name: 'Optimal',\n      itemStyle: {\n        color: utils.getColor('secondary')\n      }\n    },\n    {\n      value: 484,\n      name: 'Business',\n      itemStyle: {\n        color: utils.getColor('warning')\n      }\n    },\n    {\n      value: 600,\n      name: 'Classic addition',\n      itemStyle: {\n        color: utils.rgbaColor(utils.getColors().warning, 0.8)\n      }\n    },\n    {\n      value: 300,\n      name: 'Premium',\n      itemStyle: {\n        color: utils.getColor('success')\n      }\n    },\n    {\n      value: 300,\n      name: 'Platinum',\n      itemStyle: {\n        color: utils.getColor('info')\n      }\n    },\n    {\n      value: 400,\n      name: 'Platinum Pro',\n      itemStyle: {\n        color: utils.rgbaColor(utils.getColors().primary, 0.5)\n      }\n    }\n  ];\n\n  if ($echartPieAEdgeAlignChartEl) {\n    // Get options from data attribute\n    const userOptions = utils.getData($echartPieAEdgeAlignChartEl, 'options');\n    const chart = window.echarts.init($echartPieAEdgeAlignChartEl);\n\n    const getDefaultOptions = () => ({\n      title: [\n        {\n          text: 'Pie Edge Align Chart',\n          left: 'center',\n          textStyle: {\n            color: utils.getGrays()['600']\n          }\n        },\n        {\n          subtext: 'alignTo: \"edge\"',\n          left: '50%',\n          top: '85%',\n          textAlign: 'center',\n          subtextStyle: {\n            color: utils.getGrays()['700']\n          }\n        }\n      ],\n\n      tooltip: {\n        trigger: 'item',\n        padding: [7, 10],\n        backgroundColor: utils.getGrays()['100'],\n        borderColor: utils.getGrays()['300'],\n        textStyle: { color: utils.getGrays()['1100'] },\n        borderWidth: 1,\n        transitionDuration: 0,\n        axisPointer: {\n          type: 'none'\n        }\n      },\n\n      series: [\n        {\n          type: 'pie',\n          radius: window.innerWidth < 530 ? '45%' : '60%',\n          center: ['50%', '50%'],\n          data,\n          label: {\n            position: 'outer',\n            alignTo: 'edge',\n            margin: 20,\n            color: utils.getGrays()['700']\n          },\n          left: '5%',\n          right: '5%',\n          top: 0,\n          bottom: 0\n        }\n      ]\n    });\n\n    echartSetOption(chart, userOptions, getDefaultOptions);\n\n    //- set chart radius on window resize\n    utils.resize(() => {\n      if (window.innerWidth < 530) {\n        chart.setOption({\n          series: [{ radius: '45%' }]\n        });\n      } else {\n        chart.setOption({\n          series: [{ radius: '60%' }]\n        });\n      }\n    });\n  }\n};\n\nexport default echartsPieEdgeAlignChartInit;\n","import utils from '../../../utils';\nimport { echartSetOption } from '../echarts-utils';\n\n/* -------------------------------------------------------------------------- */\n/*                             Echarts Doughnut Chart                         */\n/* -------------------------------------------------------------------------- */\n\nconst echartsPieLabelAlignChartInit = () => {\n  const $echartPieLabelAlignChartEl = document.querySelector('.echart-pie-label-align-chart');\n\n  if ($echartPieLabelAlignChartEl) {\n    // Get options from data attribute\n    const userOptions = utils.getData($echartPieLabelAlignChartEl, 'options');\n    const chart = window.echarts.init($echartPieLabelAlignChartEl);\n\n    const data = [\n      {\n        value: 800,\n        name: 'Starter',\n        itemStyle: {\n          color: utils.rgbaColor(utils.getColors().primary, 0.5)\n        }\n      },\n      {\n        value: 1048,\n        name: 'Starter Pro',\n        itemStyle: {\n          color: utils.getColor('danger')\n        }\n      },\n      {\n        value: 735,\n        name: 'Basic',\n        itemStyle: {\n          color: utils.getColor('primary')\n        }\n      },\n      {\n        value: 580,\n        name: 'Optimal',\n        itemStyle: {\n          color: utils.getColor('secondary')\n        }\n      },\n      {\n        value: 484,\n        name: 'Business',\n        itemStyle: {\n          color: utils.getColor('warning')\n        }\n      },\n      {\n        value: 600,\n        name: 'Classic addition',\n        itemStyle: {\n          color: utils.rgbaColor(utils.getColors().warning, 0.8)\n        }\n      },\n      {\n        value: 300,\n        name: 'Premium',\n        itemStyle: {\n          color: utils.getColor('success')\n        }\n      },\n      {\n        value: 300,\n        name: 'Platinum',\n        itemStyle: {\n          color: utils.getColor('info')\n        }\n      },\n      {\n        value: 400,\n        name: 'Platinum Pro',\n        itemStyle: {\n          color: utils.rgbaColor(utils.getColors().primary, 0.5)\n        }\n      }\n    ];\n\n    const getDefaultOptions = () => ({\n      title: [\n        {\n          text: 'Pie Label Align Chart',\n          left: 'center',\n          textStyle: {\n            color: utils.getGrays()['600']\n          }\n        },\n        {\n          subtext: 'alignTo: \"labelLine\"',\n          left: '50%',\n          top: '85%',\n          textAlign: 'center',\n          subtextStyle: {\n            color: utils.getGrays()['700']\n          }\n        }\n      ],\n\n      tooltip: {\n        trigger: 'item',\n        padding: [7, 10],\n        backgroundColor: utils.getGrays()['100'],\n        borderColor: utils.getGrays()['300'],\n        textStyle: { color: utils.getGrays()['1100'] },\n        borderWidth: 1,\n        transitionDuration: 0,\n        axisPointer: {\n          type: 'none'\n        }\n      },\n\n      series: [\n        {\n          type: 'pie',\n          radius: window.innerWidth < 530 ? '45%' : '60%',\n          center: ['50%', '50%'],\n          data,\n          label: {\n            position: 'outer',\n            alignTo: 'labelLine',\n            bleedMargin: 5,\n            color: utils.getGrays()['700']\n          },\n          left: '5%',\n          right: '5%',\n          top: 0,\n          bottom: 0\n        }\n      ]\n    });\n\n    echartSetOption(chart, userOptions, getDefaultOptions);\n\n    //- set chart radius on window resize\n    utils.resize(() => {\n      if (window.innerWidth < 530) {\n        chart.setOption({\n          series: [{ radius: '45%' }]\n        });\n      } else {\n        chart.setOption({\n          series: [{ radius: '60%' }]\n        });\n      }\n    });\n  }\n};\n\nexport default echartsPieLabelAlignChartInit;\n","import utils from '../../../utils';\nimport { echartSetOption } from '../echarts-utils';\n\n/* -------------------------------------------------------------------------- */\n/*                             Echarts Doughnut Chart                         */\n/* -------------------------------------------------------------------------- */\nconst data1 = [\n  {\n    value: 1048,\n    name: 'Starter',\n    itemStyle: {\n      color: utils.getColor('danger')\n    }\n  },\n  {\n    value: 735,\n    name: 'Basic',\n    itemStyle: {\n      color: utils.getColor('primary')\n    }\n  },\n  {\n    value: 580,\n    name: 'Optimal',\n    itemStyle: {\n      color: utils.getColor('secondary')\n    }\n  },\n  {\n    value: 484,\n    name: 'Business',\n    itemStyle: {\n      color: utils.getColor('warning')\n    }\n  },\n  {\n    value: 300,\n    name: 'Premium',\n    itemStyle: {\n      color: utils.getColor('success')\n    }\n  },\n  {\n    value: 300,\n    name: 'Platinum',\n    itemStyle: {\n      color: utils.getColor('info')\n    }\n  }\n];\n\nconst data2 = [\n  {\n    value: 1048,\n    name: 'Facebook',\n    itemStyle: {\n      color: utils.getColor('primary')\n    }\n  },\n  {\n    value: 735,\n    name: 'Youtube',\n    itemStyle: {\n      color: utils.getColor('danger')\n    }\n  },\n  {\n    value: 580,\n    name: 'Twitter',\n    itemStyle: {\n      color: utils.getColor('info')\n    }\n  },\n  {\n    value: 484,\n    name: 'Linkedin',\n    itemStyle: {\n      color: utils.getColor('success')\n    }\n  },\n  {\n    value: 300,\n    name: 'Github',\n    itemStyle: {\n      color: utils.getColor('warning')\n    }\n  }\n];\nconst defaultRadius = { radius: '55%' };\nconst smallRadius = { radius: '48%' };\n\nconst echartsPieMultipleChartInit = () => {\n  const $echartPieMultipleChartEl = document.querySelector('.echart-pie-multiple-chart');\n\n  if ($echartPieMultipleChartEl) {\n    // Get options from data attribute\n    const userOptions = utils.getData($echartPieMultipleChartEl, 'options');\n    const chart = window.echarts.init($echartPieMultipleChartEl);\n\n    const getDefaultOptions = () => ({\n      title: [\n        {\n          text: 'Pie Multiple Chart',\n          left: 'center',\n          textStyle: {\n            color: utils.getGrays()['600']\n          }\n        }\n      ],\n\n      tooltip: {\n        trigger: 'item',\n        padding: [7, 10],\n        backgroundColor: utils.getGrays()['100'],\n        borderColor: utils.getGrays()['300'],\n        textStyle: { color: utils.getGrays()['1100'] },\n        borderWidth: 1,\n        transitionDuration: 0,\n        axisPointer: {\n          type: 'none'\n        }\n      },\n\n      series: [\n        {\n          type: 'pie',\n          radius: window.innerWidth < 450 ? '48%' : '55%',\n          center: ['25%', '50%'],\n          data: data1,\n          label: {\n            show: false\n          }\n        },\n        {\n          type: 'pie',\n          radius: window.innerWidth < 450 ? '48%' : '55%',\n          center: ['75%', '50%'],\n          avoidLabelOverlap: false,\n          label: {\n            show: false\n          },\n          data: data2\n        }\n      ]\n    });\n\n    echartSetOption(chart, userOptions, getDefaultOptions);\n\n    //- set chart radius on window resize\n    utils.resize(() => {\n      if (window.innerWidth < 450) {\n        chart.setOption({\n          series: [smallRadius, smallRadius]\n        });\n      } else {\n        chart.setOption({\n          series: [defaultRadius, defaultRadius]\n        });\n      }\n    });\n  }\n};\n\nexport default echartsPieMultipleChartInit;\n","import utils from '../../../utils';\nimport { echartSetOption } from '../echarts-utils';\n\n/* -------------------------------------------------------------------------- */\n/*                             Echarts Pie Chart                              */\n/* -------------------------------------------------------------------------- */\n\nconst echartsRadarChartInit = () => {\n  const $radarChartEl = document.querySelector('.echart-radar-chart-example');\n\n  if ($radarChartEl) {\n    // Get options from data attribute\n    const userOptions = utils.getData($radarChartEl, 'options');\n    const chart = window.echarts.init($radarChartEl);\n\n    const getDefaultOptions = () => ({\n      legend: {\n        orient: 'vertical',\n        left: 'left',\n        textStyle: {\n          color: utils.getGrays()['600']\n        }\n      },\n      tooltip: {\n        trigger: 'item',\n        padding: [7, 10],\n        backgroundColor: utils.getGrays()['100'],\n        borderColor: utils.getGrays()['300'],\n        textStyle: { color: utils.getGrays()['1100'] },\n        borderWidth: 1,\n        transitionDuration: 0,\n        axisPointer: {\n          type: 'none'\n        }\n      },\n\n      radar: {\n        indicator: [\n          { name: 'Marketing', max: 6500 },\n          { name: 'Admin', max: 16000 },\n          { name: 'Tech', max: 30000 },\n          { name: 'Support', max: 38000 },\n          { name: 'Dev ', max: 52000 },\n          { name: 'Sales ', max: 25000 }\n        ],\n        radius: 120,\n        splitLine: {\n          lineStyle: {\n            color: utils.rgbaColor(utils.getGrays()['700'])\n          }\n        }\n      },\n\n      series: [\n        {\n          type: 'radar',\n          data: [\n            {\n              value: [4200, 3000, 20000, 35000, 50000, 18000],\n              name: 'Data A',\n              itemStyle: {\n                color: utils.getColor('primary')\n              }\n            },\n            {\n              value: [5000, 14000, 28000, 26000, 42000, 21000],\n              name: 'Data B',\n              itemStyle: {\n                color: utils.getColor('warning')\n              }\n            }\n          ]\n        }\n      ]\n    });\n\n    echartSetOption(chart, userOptions, getDefaultOptions);\n  }\n};\n\nexport default echartsRadarChartInit;\n","import utils from '../../../utils';\nimport { echartSetOption } from '../echarts-utils';\n\n/* -------------------------------------------------------------------------- */\n/*                             Echarts Pie Chart                              */\n/* -------------------------------------------------------------------------- */\n\nconst echartsRadarCustomizedChartInit = () => {\n  const $radarChartEl = document.querySelector('.echart-radar-customized-chart');\n  function getFormatter(params) {\n    const indicators = [\n      ['Marketing', 'Sales', 'Dev', 'Support', 'Tech', 'Admin'],\n      ['Language', 'Math', 'English', 'Physics', 'Chemistry', 'Biology']\n    ];\n    const num = params.seriesIndex;\n    return `<strong > ${params.name} </strong>\n    <div class=\"fs-10 text-600\">\n      <strong >${indicators[params.seriesIndex][0]}</strong>: ${params.value[0]}  <br>\n      <strong>${indicators[num][1]}</strong>: ${params.value[1]}  <br>\n      <strong>${indicators[num][2]}</strong>: ${params.value[2]}  <br>\n      <strong>${indicators[num][3]}</strong>: ${params.value[3]}  <br>\n      <strong>${indicators[num][4]}</strong>: ${params.value[4]}  <br>\n      <strong>${indicators[num][5]}</strong>: ${params.value[5]}  <br>\n    </div>`;\n  }\n\n  if ($radarChartEl) {\n    // Get options from data attribute\n    const userOptions = utils.getData($radarChartEl, 'options');\n    const chart = window.echarts.init($radarChartEl);\n\n    const getDefaultOptions = () => ({\n      legend: {\n        orient: 'vertical',\n        left: 'left',\n        textStyle: {\n          color: utils.getGrays()['600']\n        }\n      },\n      tooltip: {\n        trigger: 'item',\n        padding: [7, 10],\n        backgroundColor: utils.getGrays()['100'],\n        borderColor: utils.getGrays()['300'],\n        textStyle: { color: utils.getGrays()['1100'] },\n        borderWidth: 1,\n        transitionDuration: 0,\n        axisPointer: {\n          type: 'none'\n        },\n        formatter: getFormatter\n      },\n\n      radar: [\n        {\n          radius: window.innerWidth < 576 ? 90 : 120,\n          startAngle: 90,\n          splitNumber: 4,\n          shape: 'circle',\n          center: window.innerWidth < 992 ? ['50%', '30%'] : ['25%', '50%'],\n          indicator: [\n            { name: 'Admin', max: 6500 },\n            { name: 'Tech', max: 16000 },\n            { name: 'Support', max: 30000 },\n            { name: 'Dev', max: 38000 },\n            { name: 'Sales', max: 52000 },\n            { name: 'Marketing', max: 25000 }\n          ],\n          name: {\n            formatter: '{value}',\n            textStyle: {\n              color: utils.getGrays()['700']\n            }\n          },\n          splitLine: {\n            lineStyle: {\n              color: utils.rgbaColor(utils.getGrays()['700'])\n            }\n          }\n        },\n\n        {\n          indicator: [\n            { text: 'Language', max: 150 },\n            { text: 'Math', max: 150 },\n            { text: 'English', max: 150 },\n            { text: 'physics', max: 120 },\n            { text: 'Chemistry', max: 108 },\n            { text: 'Biology', max: 72 }\n          ],\n          radius: window.innerWidth < 576 ? 90 : 120,\n          center: window.innerWidth < 992 ? ['50%', '75%'] : ['75%', '50%'],\n          splitLine: {\n            lineStyle: {\n              color: utils.rgbaColor(utils.getGrays()['700'])\n            }\n          },\n          name: {\n            textStyle: {\n              color: utils.rgbaColor(utils.getGrays()['1000']),\n              backgroundColor: utils.rgbaColor(utils.getGrays()['100']),\n              borderRadius: 3,\n              padding: [3, 5]\n            }\n          }\n        }\n      ],\n\n      series: [\n        {\n          type: 'radar',\n          data: [\n            {\n              value: [5200, 4000, 20000, 30000, 20000, 18000],\n              name: 'Data A',\n              itemStyle: {\n                color: utils.getColor('info')\n              },\n              areaStyle: {\n                color: utils.rgbaColor(utils.getColors().info, 0.3)\n              }\n            },\n            {\n              value: [5000, 12000, 28000, 26000, 32000, 21000],\n              name: 'Data B',\n              itemStyle: {\n                color: utils.getColor('success')\n              },\n              areaStyle: {\n                color: utils.rgbaColor(utils.getColors().success, 0.3)\n              }\n            }\n          ]\n        },\n\n        {\n          type: 'radar',\n          radarIndex: 1,\n          data: [\n            {\n              value: [130, 110, 130, 100, 99, 70],\n              name: 'Data C',\n              symbol: 'rect',\n              symbolSize: 12,\n              lineStyle: {\n                type: 'dashed'\n              },\n              itemStyle: {\n                color: utils.getColor('warning')\n              },\n              areaStyle: {\n                color: utils.rgbaColor(utils.getColors().warning, 0.3)\n              },\n              label: {\n                show: true,\n                formatter(params) {\n                  return params.value;\n                },\n                color: utils.getGrays()['700']\n              }\n            },\n            {\n              value: [100, 93, 50, 90, 70, 60],\n              name: 'Data D',\n              itemStyle: {\n                color: utils.getColor('danger')\n              },\n              areaStyle: {\n                color: utils.rgbaColor(utils.getColors().danger, 0.3)\n              }\n            }\n          ]\n        }\n      ]\n    });\n\n    echartSetOption(chart, userOptions, getDefaultOptions);\n    //- set chart position on Window resize\n    utils.resize(() => {\n      if (window.innerWidth < 992) {\n        chart.setOption({\n          radar: [\n            {\n              center: ['50%', '30%']\n            },\n            {\n              center: ['50%', '75%']\n            }\n          ]\n        });\n      } else {\n        chart.setOption({\n          radar: [\n            {\n              center: ['25%', '50%']\n            },\n            {\n              center: ['75%', '50%']\n            }\n          ]\n        });\n      }\n\n      if (window.innerWidth < 576) {\n        chart.setOption({\n          radar: [\n            {\n              radius: 90\n            },\n            {\n              radius: 90\n            }\n          ]\n        });\n      } else {\n        chart.setOption({\n          radar: [\n            {\n              radius: 120\n            },\n            {\n              radius: 120\n            }\n          ]\n        });\n      }\n    });\n  }\n};\n\nexport default echartsRadarCustomizedChartInit;\n","import utils from '../../../utils';\nimport { echartSetOption } from '../echarts-utils';\n\n/* -------------------------------------------------------------------------- */\n/*                      Echarts Radar Multiple Chart                          */\n/* -------------------------------------------------------------------------- */\n\nconst echartsRadarMultipleChartInit = () => {\n  const $radarChartEl = document.querySelector('.echart-radar-multiple-chart');\n\n  if ($radarChartEl) {\n    // Get options from data attribute\n    const userOptions = utils.getData($radarChartEl, 'options');\n    const chart = window.echarts.init($radarChartEl);\n\n    const months = [\n      'January',\n      'February',\n      'March',\n      'April',\n      'May',\n      'June',\n      'July',\n      'August',\n      'September',\n      'October',\n      'November',\n      'December'\n    ];\n\n    const getCenter = () => {\n      if (window.innerWidth < 1540 && window.innerWidth > 992) {\n        return [\n          ['25%', '40%'],\n          ['50%', '75%'],\n          ['75%', '40%']\n        ];\n      }\n      if (window.innerWidth < 992) {\n        return [\n          ['50%', '20%'],\n          ['50%', '50%'],\n          ['50%', '80%']\n        ];\n      }\n      return [\n        ['15%', '50%'],\n        ['50%', '50%'],\n        ['85%', '50%']\n      ];\n    };\n\n    const getDefaultOptions = () => ({\n      legend: {\n        left: 'left',\n        textStyle: {\n          color: utils.getGrays()['600']\n        }\n      },\n      tooltip: {\n        trigger: 'item',\n        padding: [7, 10],\n        backgroundColor: utils.getGrays()['100'],\n        borderColor: utils.getGrays()['300'],\n        textStyle: { color: utils.getGrays()['1100'] },\n        borderWidth: 1,\n        transitionDuration: 0,\n        axisPointer: {\n          type: 'none'\n        }\n      },\n\n      radar: [\n        {\n          indicator: [\n            { text: 'Brand', max: 100 },\n            { text: 'content', max: 100 },\n            { text: 'Usability', max: 100 },\n            { text: 'Features', max: 100 }\n          ],\n          center: getCenter()[0],\n          radius: 85,\n          splitLine: {\n            lineStyle: {\n              color: utils.rgbaColor(utils.getGrays()['700'])\n            }\n          }\n        },\n        {\n          indicator: [\n            { text: 'Exterior', max: 100 },\n            { text: 'Take pictures', max: 100 },\n            { text: 'system', max: 100 },\n            { text: 'performance', max: 100 },\n            { text: 'screen', max: 100 }\n          ],\n          radius: 85,\n          center: getCenter()[1],\n          splitLine: {\n            lineStyle: {\n              color: utils.rgbaColor(utils.getGrays()['700'])\n            }\n          }\n        },\n        {\n          indicator: months.map(month => ({\n            text: month,\n            max: 100\n          })),\n          center: getCenter()[2],\n          radius: 85,\n          splitLine: {\n            lineStyle: {\n              color: utils.rgbaColor(utils.getGrays()['700'])\n            }\n          }\n        }\n      ],\n\n      series: [\n        {\n          type: 'radar',\n          tooltip: {\n            trigger: 'item'\n          },\n          areaStyle: {\n            color: utils.rgbaColor(utils.getColors().info, 0.5)\n          },\n          data: [\n            {\n              value: [60, 73, 85, 40],\n              name: 'A software',\n              itemStyle: {\n                color: utils.getColor('info')\n              }\n            }\n          ]\n        },\n        {\n          type: 'radar',\n          radarIndex: 1,\n          data: [\n            {\n              value: [85, 90, 90, 95, 95],\n              name: 'A staple mobile phone',\n              itemStyle: {\n                color: utils.rgbaColor(utils.getColors().primary, 0.8)\n              },\n              areaStyle: {\n                color: utils.rgbaColor(utils.getColors().primary, 0.3)\n              }\n            },\n            {\n              value: [95, 80, 75, 90, 93],\n              name: 'A fruit phone',\n              itemStyle: {\n                color: utils.getColor('success')\n              },\n              areaStyle: {\n                color: utils.rgbaColor(utils.getColors().success, 0.3)\n              }\n            }\n          ]\n        },\n        {\n          type: 'radar',\n          radarIndex: 2,\n          areaStyle: {},\n          tooltip: {\n            show: false\n          },\n          data: [\n            {\n              name: 'Precipitation',\n              value: [2.6, 5.9, 9.0, 26.4, 28.7, 70.7, 75.6, 82.2, 48.7, 18.8, 6.0, 2.3],\n              itemStyle: {\n                color: utils.getColor('primary')\n              },\n              areaStyle: {\n                color: utils.rgbaColor(utils.getColors().primary, 0.5)\n              }\n            },\n            {\n              name: 'Evaporation',\n              value: [2.0, 4.9, 7.0, 23.2, 25.6, 76.7, 35.6, 62.2, 32.6, 20.0, 6.4, 3.3],\n              itemStyle: {\n                color: utils.getColor('warning')\n              },\n              areaStyle: {\n                color: utils.rgbaColor(utils.getColors().warning, 0.5)\n              }\n            }\n          ]\n        }\n      ]\n    });\n\n    echartSetOption(chart, userOptions, getDefaultOptions);\n\n    // - set chart position on Window resize\n    utils.resize(() => {\n      chart.setOption({\n        radar: getCenter().map(item => ({\n          center: item\n        }))\n      });\n    });\n  }\n};\n\nexport default echartsRadarMultipleChartInit;\n","import utils from '../../../utils';\nimport { echartSetOption } from '../echarts-utils';\n\n/* -------------------------------------------------------------------------- */\n/*                        Echarts Scatter Basic Chart                         */\n/* -------------------------------------------------------------------------- */\n\nconst echartsScatterBasicChartInit = () => {\n  const $basicScatterChartEl = document.querySelector('.echart-basic-scatter-chart-example');\n\n  if ($basicScatterChartEl) {\n    // Get options from data attribute\n    const userOptions = utils.getData($basicScatterChartEl, 'options');\n    const chart = window.echarts.init($basicScatterChartEl);\n\n    const getDefaultOptions = () => ({\n      tooltip: {\n        trigger: 'item',\n        axisPointer: {\n          type: 'none'\n        },\n        padding: [7, 10],\n        backgroundColor: utils.getGrays()['100'],\n        borderColor: utils.getGrays()['300'],\n        textStyle: { color: utils.getGrays()['1100'] },\n        borderWidth: 1,\n        transitionDuration: 0\n      },\n      xAxis: {\n        axisLabel: {\n          color: utils.getGrays()['600']\n        },\n        axisLine: {\n          show: true,\n          lineStyle: {\n            color: utils.getGrays()['200']\n          }\n        },\n        splitLine: {\n          show: true,\n          lineStyle: {\n            color: utils.getGrays()['200']\n          }\n        }\n      },\n      yAxis: {\n        axisLabel: {\n          color: utils.getGrays()['600']\n        },\n        splitLine: {\n          show: true,\n          lineStyle: {\n            color: utils.getGrays()['200']\n          }\n        },\n\n        axisLine: {\n          show: true,\n          lineStyle: {\n            color: utils.getGrays()['200']\n          }\n        }\n      },\n      series: [\n        {\n          // symbolSize: val => val[2] * 2,\n          data: [\n            [10.0, 8.04],\n            [8.07, 6.95],\n            [13.0, 7.58],\n            [9.05, 8.81],\n            [11.0, 8.33],\n            [14.0, 7.66],\n            [13.4, 6.81],\n            [10.0, 6.33],\n            [14.0, 8.96],\n            [12.5, 6.82],\n            [9.15, 7.2],\n            [11.5, 7.2],\n            [3.03, 4.23],\n            [12.2, 7.83],\n            [2.02, 4.47],\n            [1.05, 3.33],\n            [4.05, 4.96],\n            [6.03, 7.24],\n            [12.0, 6.26],\n            [12.0, 8.84],\n            [7.08, 5.82],\n            [5.02, 5.68]\n          ],\n          type: 'scatter',\n          itemStyle: {\n            color: utils.getColor('danger')\n          }\n        }\n      ],\n      grid: {\n        right: 8,\n        left: 5,\n        bottom: 5,\n        top: 8,\n        containLabel: true\n      }\n    });\n\n    echartSetOption(chart, userOptions, getDefaultOptions);\n  }\n};\n\nexport default echartsScatterBasicChartInit;\n","import utils from '../../../utils';\nimport { echartSetOption } from '../echarts-utils';\n\n/* -------------------------------------------------------------------------- */\n/*                      Echarts Scatter Quartet Chart                         */\n/* -------------------------------------------------------------------------- */\n\nconst echartsScatterQuartetChartInit = () => {\n  const $scatterQuartetChartEl = document.querySelector('.echart-scatter-quartet-chart-example');\n\n  if ($scatterQuartetChartEl) {\n    // Get options from data attribute\n    const userOptions = utils.getData($scatterQuartetChartEl, 'options');\n    const chart = window.echarts.init($scatterQuartetChartEl);\n\n    const dataAll = [\n      [\n        [10.0, 8.04],\n        [8.0, 6.95],\n        [13.0, 7.58],\n        [9.0, 8.81],\n        [11.0, 8.33],\n        [14.0, 9.96],\n        [6.0, 7.24],\n        [4.0, 4.26],\n        [12.0, 10.84],\n        [7.0, 4.82],\n        [5.0, 5.68]\n      ],\n      [\n        [10.0, 9.14],\n        [8.0, 8.14],\n        [13.0, 8.74],\n        [9.0, 8.77],\n        [11.0, 9.26],\n        [14.0, 8.1],\n        [6.0, 6.13],\n        [4.0, 3.1],\n        [12.0, 9.13],\n        [7.0, 7.26],\n        [5.0, 4.74]\n      ],\n      [\n        [10.0, 7.46],\n        [8.0, 6.77],\n        [13.0, 12.74],\n        [9.0, 7.11],\n        [11.0, 7.81],\n        [14.0, 8.84],\n        [6.0, 6.08],\n        [4.0, 5.39],\n        [12.0, 8.15],\n        [7.0, 6.42],\n        [5.0, 5.73]\n      ],\n      [\n        [8.0, 6.58],\n        [8.0, 5.76],\n        [8.0, 7.71],\n        [8.0, 8.84],\n        [8.0, 8.47],\n        [8.0, 7.04],\n        [8.0, 5.25],\n        [19.0, 12.5],\n        [8.0, 5.56],\n        [8.0, 7.91],\n        [8.0, 6.89]\n      ]\n    ];\n\n    const xAxis = () => ({\n      axisLabel: {\n        color: utils.getGrays()['600']\n      },\n      axisLine: {\n        show: true,\n        lineStyle: {\n          color: utils.getGrays()['300']\n        }\n      },\n\n      splitLine: {\n        show: true,\n        lineStyle: {\n          color: utils.getGrays()['200']\n        }\n      }\n    });\n\n    const yAxis = () => ({\n      axisLabel: {\n        color: utils.getGrays()['600']\n      },\n      splitLine: {\n        show: true,\n        lineStyle: {\n          color: utils.getGrays()['200']\n        }\n      },\n\n      axisLine: {\n        show: true,\n        lineStyle: {\n          color: utils.getGrays()['300']\n        }\n      }\n    });\n\n    const markLineOpt = {\n      animation: false,\n      label: {\n        formatter: 'y = 0.5 * x + 3',\n        align: 'right',\n        color: utils.getGrays()['600'],\n        fontWeight: 600\n      },\n      lineStyle: {\n        type: 'solid'\n      },\n      tooltip: {\n        formatter: 'y = 0.5 * x + 3'\n      },\n      data: [\n        [\n          {\n            coord: [0, 3],\n            symbol: 'none'\n          },\n          {\n            coord: [20, 13],\n            symbol: 'none'\n          }\n        ]\n      ]\n    };\n    const gridMdUp = [\n      { left: '7%', top: '10%', width: '38%', height: '38%' },\n      { right: '7%', top: '10%', width: '38%', height: '38%' },\n      { left: '7%', bottom: '7%', width: '38%', height: '38%' },\n      { right: '7%', bottom: '7%', width: '38%', height: '38%' }\n    ];\n\n    const gridMdDown = [\n      { left: 6, right: 7, top: '4%', height: '20%' },\n      { left: 6, right: 7, top: '29%', height: '20%' },\n      { left: 6, right: 7, bottom: '26%', height: '20%' },\n      { left: 6, right: 7, bottom: 25, height: '20%' }\n    ];\n\n    const getDefaultOptions = () => ({\n      color: [\n        utils.getColor('primary'),\n        utils.getColor('success'),\n        utils.getColor('warning'),\n        utils.getColor('danger')\n      ],\n      tooltip: {\n        trigger: 'item',\n        axisPointer: {\n          type: 'none'\n        },\n        padding: [7, 10],\n        backgroundColor: utils.getGrays()['100'],\n        borderColor: utils.getGrays()['300'],\n        textStyle: { color: utils.getGrays()['1100'] },\n        borderWidth: 1,\n        transitionDuration: 0,\n        formatter: 'Group {a}: ({c})'\n      },\n      title: {\n        text: \"Anscombe's quartet\",\n        left: 'center',\n        top: 0,\n        textStyle: {\n          color: utils.getGrays()['600']\n        }\n      },\n      grid: window.innerWidth < 768 ? gridMdDown : gridMdUp,\n      xAxis: [\n        { gridIndex: 0, min: 0, max: 20, ...xAxis() },\n        { gridIndex: 1, min: 0, max: 20, ...xAxis() },\n        { gridIndex: 2, min: 0, max: 20, ...xAxis() },\n        { gridIndex: 3, min: 0, max: 20, ...xAxis() }\n      ],\n      yAxis: [\n        { gridIndex: 0, min: 0, max: 15, ...yAxis() },\n        { gridIndex: 1, min: 0, max: 15, ...yAxis() },\n        { gridIndex: 2, min: 0, max: 15, ...yAxis() },\n        { gridIndex: 3, min: 0, max: 15, ...yAxis() }\n      ],\n      series: [\n        {\n          name: 'I',\n          type: 'scatter',\n          xAxisIndex: 0,\n          yAxisIndex: 0,\n          data: dataAll[0],\n          markLine: markLineOpt\n        },\n        {\n          name: 'II',\n          type: 'scatter',\n          xAxisIndex: 1,\n          yAxisIndex: 1,\n          data: dataAll[1],\n          markLine: markLineOpt\n        },\n        {\n          name: 'III',\n          type: 'scatter',\n          xAxisIndex: 2,\n          yAxisIndex: 2,\n          data: dataAll[2],\n          markLine: markLineOpt\n        },\n        {\n          name: 'IV',\n          type: 'scatter',\n          xAxisIndex: 3,\n          yAxisIndex: 3,\n          data: dataAll[3],\n          markLine: markLineOpt\n        }\n      ]\n    });\n\n    echartSetOption(chart, userOptions, getDefaultOptions);\n\n    utils.resize(() => {\n      if (window.innerWidth < 768) {\n        chart.setOption({\n          grid: gridMdDown\n        });\n      } else {\n        chart.setOption({\n          grid: gridMdUp\n        });\n      }\n    });\n  }\n};\n\nexport default echartsScatterQuartetChartInit;\n","import utils from '../../../utils';\nimport { echartSetOption } from '../echarts-utils';\n\n/* -------------------------------------------------------------------------- */\n/*                   Echarts Scatter singlr Axis Chart                        */\n/* -------------------------------------------------------------------------- */\n\nconst echartsScatterSingleAxisChartInit = () => {\n  const $scatterSingleAxisChartEl = document.querySelector(\n    '.echart-scatter-single-axis-chart-example'\n  );\n\n  if ($scatterSingleAxisChartEl) {\n    // Get options from data attribute\n    const userOptions = utils.getData($scatterSingleAxisChartEl, 'options');\n    const chart = window.echarts.init($scatterSingleAxisChartEl);\n\n    const hours = [\n      '12am',\n      '1am',\n      '2am',\n      '3am',\n      '4am',\n      '5am',\n      '6am',\n      '7am',\n      '8am',\n      '9am',\n      '10am',\n      '11am',\n      '12pm',\n      '1pm',\n      '2pm',\n      '3pm',\n      '4pm',\n      '5pm',\n      '6pm',\n      '7pm',\n      '8pm',\n      '9pm',\n      '10pm',\n      '11pm'\n    ];\n\n    const days = ['Saturday', 'Friday', 'Thursday', 'Wednesday', 'Tuesday', 'Monday', 'Sunday'];\n\n    const data = [];\n    for (let i = 0; i < 7; i += 1) {\n      for (let j = 0; j < 24; j += 1) {\n        data.push([j, i, utils.getRandomNumber(0, 10)]);\n      }\n    }\n\n    const getDefaultOptions = () => ({\n      tooltip: {\n        trigger: 'item',\n        axisPointer: {\n          type: 'none'\n        },\n        padding: [7, 10],\n        backgroundColor: utils.getGrays()['100'],\n        borderColor: utils.getGrays()['300'],\n        textStyle: { color: utils.getGrays()['1100'] },\n        borderWidth: 1,\n        transitionDuration: 0,\n        position: 'top',\n        formatter: params => `\n            ${days[params.value[1]]} <br/>\n            ${hours[params.value[0]]} : ${params.value[2]}\n          `\n      },\n      xAxis: {\n        type: 'category',\n        data: hours,\n        boundaryGap: false,\n        splitLine: {\n          show: true,\n          lineStyle: {\n            color: utils.getGrays()['200']\n          }\n        },\n        axisLine: {\n          show: false\n        },\n        axisTick: {\n          lineStyle: {\n            color: utils.getGrays()['600']\n          }\n        }\n      },\n      yAxis: {\n        type: 'category',\n        data: days,\n        axisLine: {\n          show: false\n        },\n        axisTick: {\n          lineStyle: {\n            color: utils.getGrays()['600']\n          }\n        },\n        axisLabel: {\n          margin: 15\n        }\n      },\n      series: [\n        {\n          name: 'Punch Card',\n          type: 'scatter',\n          symbolSize: val => val[2] * 2,\n          data,\n          animationDelay: idx => idx * 5,\n          itemStyle: {\n            color: utils.getColor('primary')\n          }\n        }\n      ],\n      grid: {\n        right: 12,\n        left: 5,\n        bottom: 5,\n        top: 5,\n        containLabel: true\n      }\n    });\n\n    echartSetOption(chart, userOptions, getDefaultOptions);\n  }\n};\n\nexport default echartsScatterSingleAxisChartInit;\n","import utils from '../../../utils';\nimport { getPosition, echartSetOption, tooltipFormatter } from '../echarts-utils';\n\n/* -------------------------------------------------------------------------- */\n/*                    Echarts Stacked Area  Chart                             */\n/* -------------------------------------------------------------------------- */\n\nconst echartsStackedAreaChartInit = () => {\n  const $stackedAreaChartEl = document.querySelector('.echart-stacked-area-chart-example');\n\n  if ($stackedAreaChartEl) {\n    // Get options from data attribute\n    const userOptions = utils.getData($stackedAreaChartEl, 'options');\n    const chart = window.echarts.init($stackedAreaChartEl);\n\n    const days = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday'];\n\n    const getDefaultOptions = () => ({\n      tooltip: {\n        trigger: 'axis',\n        padding: [7, 10],\n        backgroundColor: utils.getGrays()['100'],\n        borderColor: utils.getGrays()['300'],\n        textStyle: { color: utils.getGrays()['1100'] },\n        borderWidth: 1,\n        transitionDuration: 0,\n        position(pos, params, dom, rect, size) {\n          return getPosition(pos, params, dom, rect, size);\n        },\n        axisPointer: {\n          type: 'none'\n        },\n        formatter: tooltipFormatter\n      },\n      xAxis: {\n        type: 'category',\n        data: days,\n        boundaryGap: false,\n        axisLine: {\n          lineStyle: {\n            color: utils.getGrays()['300'],\n            type: 'solid'\n          }\n        },\n        axisTick: { show: false },\n        axisLabel: {\n          color: utils.getGrays()['400'],\n          margin: 15,\n          formatter: value => value.substring(0, 3)\n        },\n        splitLine: {\n          show: false\n        }\n      },\n      yAxis: {\n        type: 'value',\n        splitLine: {\n          lineStyle: {\n            color: utils.getGrays()['200']\n          }\n        },\n        boundaryGap: false,\n        axisLabel: {\n          show: true,\n          color: utils.getGrays()['400'],\n          margin: 15\n        },\n        axisTick: { show: false },\n        axisLine: { show: false }\n      },\n      series: [\n        {\n          name: 'Matcha Latte',\n          type: 'line',\n          symbolSize: 10,\n          stack: 'product',\n          data: [120, 132, 101, 134, 90, 230, 210],\n          areaStyle: {\n            color: utils.rgbaColor(utils.getColor('info'), 0.3)\n          },\n          itemStyle: {\n            color: utils.getGrays()['100'],\n            borderColor: utils.getColor('info'),\n            borderWidth: 2\n          },\n          lineStyle: {\n            color: utils.getColor('info')\n          },\n          symbol: 'circle'\n        },\n        {\n          name: 'Milk Tea',\n          type: 'line',\n          symbolSize: 10,\n          stack: 'product',\n          data: [220, 182, 191, 234, 290, 330, 310],\n          areaStyle: {\n            color: utils.rgbaColor(utils.getColor('success'), 0.3)\n          },\n          itemStyle: {\n            color: utils.getGrays()['100'],\n            borderColor: utils.getColor('success'),\n            borderWidth: 2\n          },\n          lineStyle: {\n            color: utils.getColor('success')\n          },\n          symbol: 'circle'\n        },\n        {\n          name: 'Cheese Cocoa',\n          type: 'line',\n          symbolSize: 10,\n          stack: 'product',\n          data: [150, 232, 201, 154, 190, 330, 410],\n          areaStyle: {\n            color: utils.rgbaColor(utils.getColor('danger'), 0.3)\n          },\n          itemStyle: {\n            color: utils.getGrays()['100'],\n            borderColor: utils.getColor('danger'),\n            borderWidth: 2\n          },\n          lineStyle: {\n            color: utils.getColor('danger')\n          },\n          symbol: 'circle'\n        },\n        {\n          name: 'Cheese Brownie',\n          type: 'line',\n          symbolSize: 10,\n          stack: 'product',\n          data: [320, 332, 301, 334, 390, 330, 320],\n          areaStyle: {\n            color: utils.rgbaColor(utils.getColor('warning'), 0.3)\n          },\n          itemStyle: {\n            color: utils.getGrays()['100'],\n            borderColor: utils.getColor('warning'),\n            borderWidth: 2\n          },\n          lineStyle: {\n            color: utils.getColor('warning')\n          },\n          symbol: 'circle'\n        },\n        {\n          name: 'Matcha Cocoa',\n          type: 'line',\n          symbolSize: 10,\n          stack: 'product',\n          data: [820, 932, 901, 934, 1290, 1330, 1320],\n          areaStyle: {\n            color: utils.rgbaColor(utils.getColor('primary'), 0.3)\n          },\n          itemStyle: {\n            color: utils.getGrays()['100'],\n            borderColor: utils.getColor('primary'),\n            borderWidth: 2\n          },\n          lineStyle: {\n            color: utils.getColor('primary')\n          },\n          symbol: 'circle'\n        }\n      ],\n      grid: { right: 10, left: 5, bottom: 5, top: 8, containLabel: true }\n    });\n\n    echartSetOption(chart, userOptions, getDefaultOptions);\n  }\n};\n\nexport default echartsStackedAreaChartInit;\n","import utils from '../../../utils';\nimport { echartSetOption, tooltipFormatter } from '../echarts-utils';\n\n/* -------------------------------------------------------------------------- */\n/*                             Echarts Bar Chart                             */\n/* -------------------------------------------------------------------------- */\n\nconst echartsHorizontalStackedChartInit = () => {\n  const $horizontalStackChartEl = document.querySelector(\n    '.echart-horizontal-stacked-chart-example'\n  );\n\n  if ($horizontalStackChartEl) {\n    // Get options from data attribute\n    const userOptions = utils.getData($horizontalStackChartEl, 'options');\n    const chart = window.echarts.init($horizontalStackChartEl);\n\n    const days = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday'];\n\n    const getDefaultOptions = () => ({\n      color: [\n        utils.getColor('info'),\n        utils.getColor('danger'),\n        utils.getColor('warning'),\n        utils.getColor('success'),\n        utils.getColor('primary')\n      ],\n      tooltip: {\n        trigger: 'axis',\n        axisPointer: {\n          type: 'shadow'\n        },\n        padding: [7, 10],\n        backgroundColor: utils.getGrays()['100'],\n        borderColor: utils.getGrays()['300'],\n        textStyle: { color: utils.getGrays()['1100'] },\n        borderWidth: 1,\n        transitionDuration: 0,\n        formatter: tooltipFormatter\n      },\n      toolbox: {\n        feature: {\n          magicType: {\n            type: ['stack', 'tiled']\n          }\n        },\n        right: 0\n      },\n      legend: {\n        data: ['Direct', 'Mail Ad', 'Affiliate Ad', 'Video Ad', 'Search Engine'],\n        textStyle: {\n          color: utils.getGrays()['600']\n        },\n        left: 0\n      },\n      xAxis: {\n        type: 'value',\n        axisLine: {\n          show: true,\n          lineStyle: {\n            color: utils.getGrays()['300']\n          }\n        },\n        axisTick: { show: false },\n        axisLabel: {\n          color: utils.getGrays()['500']\n        },\n        splitLine: {\n          lineStyle: {\n            show: true,\n            color: utils.getGrays()['200']\n          }\n        }\n      },\n      yAxis: {\n        type: 'category',\n        data: days,\n        axisLine: {\n          lineStyle: {\n            show: true,\n            color: utils.getGrays()['300']\n          }\n        },\n        axisTick: { show: false },\n        axisLabel: {\n          color: utils.getGrays()['500'],\n          formatter: value => value.substring(0, 3)\n        }\n      },\n      series: [\n        {\n          name: 'Direct',\n          type: 'bar',\n          stack: 'total',\n          label: {\n            show: true,\n            textStyle: {\n              color: '#fff'\n            }\n          },\n          emphasis: {\n            focus: 'series'\n          },\n          data: [320, 302, 301, 334, 390, 330, 320]\n        },\n        {\n          name: 'Mail Ad',\n          type: 'bar',\n          stack: 'total',\n          label: {\n            show: true\n          },\n          emphasis: {\n            focus: 'series'\n          },\n          data: [220, 188, 301, 250, 190, 230, 210]\n        },\n        {\n          name: 'Affiliate Ad',\n          type: 'bar',\n          stack: 'total',\n          label: {\n            show: true,\n            textStyle: {\n              color: '#fff'\n            }\n          },\n          emphasis: {\n            focus: 'series'\n          },\n          data: [220, 182, 191, 234, 290, 330, 310]\n        },\n        {\n          name: 'Video Ad',\n          type: 'bar',\n          stack: 'total',\n          label: {\n            show: true,\n            textStyle: {\n              color: '#fff'\n            }\n          },\n          emphasis: {\n            focus: 'series'\n          },\n          data: [150, 212, 201, 154, 190, 330, 410]\n        },\n        {\n          name: 'Search Engine',\n          type: 'bar',\n          stack: 'total',\n          label: {\n            show: true\n          },\n          emphasis: {\n            focus: 'series'\n          },\n          data: [820, 832, 901, 934, 1290, 1330, 1320]\n        }\n      ],\n      grid: {\n        right: 15,\n        left: 5,\n        bottom: 5,\n        top: '15%',\n        containLabel: true\n      }\n    });\n\n    echartSetOption(chart, userOptions, getDefaultOptions);\n  }\n};\n\nexport default echartsHorizontalStackedChartInit;\n","import utils from '../../../utils';\nimport { getPosition, echartSetOption, tooltipFormatter } from '../echarts-utils';\n\n/* -------------------------------------------------------------------------- */\n/*                     Echarts Stacked Line Chart                             */\n/* -------------------------------------------------------------------------- */\n\nconst echartsStackedLineChartInit = () => {\n  const $stackedLineChartEl = document.querySelector('.echart-stacked-line-chart-example');\n\n  if ($stackedLineChartEl) {\n    // Get options from data attribute\n    const userOptions = utils.getData($stackedLineChartEl, 'options');\n    const chart = window.echarts.init($stackedLineChartEl);\n\n    const days = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday'];\n\n    const getDefaultOptions = () => ({\n      tooltip: {\n        trigger: 'axis',\n        padding: [7, 10],\n        backgroundColor: utils.getGrays()['100'],\n        borderColor: utils.getGrays()['300'],\n        textStyle: { color: utils.getGrays()['1100'] },\n        borderWidth: 1,\n        transitionDuration: 0,\n        position(pos, params, dom, rect, size) {\n          return getPosition(pos, params, dom, rect, size);\n        },\n        axisPointer: {\n          type: 'none'\n        },\n        formatter: tooltipFormatter\n      },\n      xAxis: {\n        type: 'category',\n        data: days,\n        boundaryGap: false,\n        axisLine: {\n          lineStyle: {\n            color: utils.getGrays()['300'],\n            type: 'solid'\n          }\n        },\n        axisTick: { show: false },\n        axisLabel: {\n          color: utils.getGrays()['400'],\n          margin: 15,\n          formatter: value => value.substring(0, 3)\n        },\n        splitLine: {\n          show: false\n        }\n      },\n      yAxis: {\n        type: 'value',\n        splitLine: {\n          lineStyle: {\n            color: utils.getGrays()['200'],\n            type: 'dashed'\n          }\n        },\n        boundaryGap: false,\n        axisLabel: {\n          show: true,\n          color: utils.getGrays()['400'],\n          margin: 15\n        },\n        axisTick: { show: false },\n        axisLine: { show: false }\n      },\n      series: [\n        {\n          name: 'Matcha Latte',\n          type: 'line',\n          symbolSize: 6,\n          itemStyle: {\n            color: utils.getGrays()['100'],\n            borderColor: utils.getColor('info'),\n            borderWidth: 2\n          },\n          lineStyle: {\n            color: utils.getColor('info')\n          },\n          symbol: 'circle',\n          stack: 'product',\n          data: [120, 132, 101, 134, 90, 230, 210]\n        },\n        {\n          name: 'Milk Tea',\n          type: 'line',\n          symbolSize: 10,\n          itemStyle: {\n            color: utils.getGrays()['100'],\n            borderColor: utils.getColor('success'),\n            borderWidth: 2\n          },\n          lineStyle: {\n            color: utils.getColor('success')\n          },\n          symbol: 'circle',\n          stack: 'product',\n          data: [220, 182, 191, 234, 290, 330, 310]\n        },\n        {\n          name: 'Cheese Cocoa',\n          type: 'line',\n          symbolSize: 10,\n          itemStyle: {\n            color: utils.getGrays()['100'],\n            borderColor: utils.getColor('danger'),\n            borderWidth: 2\n          },\n          lineStyle: {\n            color: utils.getColor('danger')\n          },\n          symbol: 'circle',\n          stack: 'product',\n          data: [150, 232, 201, 154, 190, 330, 410]\n        },\n        {\n          name: 'Cheese Brownie',\n          type: 'line',\n          symbolSize: 10,\n          itemStyle: {\n            color: utils.getGrays()['100'],\n            borderColor: utils.getColor('warning'),\n            borderWidth: 2\n          },\n          lineStyle: {\n            color: utils.getColor('warning')\n          },\n          symbol: 'circle',\n          stack: 'product',\n          data: [320, 332, 301, 334, 390, 330, 320]\n        },\n        {\n          name: 'Matcha Cocoa',\n          type: 'line',\n          symbolSize: 10,\n          itemStyle: {\n            color: utils.getGrays()['100'],\n            borderColor: utils.getColor('primary'),\n            borderWidth: 2\n          },\n          lineStyle: {\n            color: utils.getColor('primary')\n          },\n          symbol: 'circle',\n          stack: 'product',\n          data: [820, 932, 901, 934, 1290, 1330, 1320]\n        }\n      ],\n      grid: { right: 10, left: 5, bottom: 5, top: 8, containLabel: true }\n    });\n\n    echartSetOption(chart, userOptions, getDefaultOptions);\n  }\n};\n\nexport default echartsStackedLineChartInit;\n","import utils from '../../../utils';\nimport { echartSetOption } from '../echarts-utils';\n\nconst echartsStackedVerticalChartInit = () => {\n  const $stackedVerticalChart = document.querySelector('.echart-stacked-vertival-chart-example');\n\n  if ($stackedVerticalChart) {\n    const userOptions = utils.getData($stackedVerticalChart, 'options');\n    const chart = window.echarts.init($stackedVerticalChart);\n    const xAxisData = ['Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun'];\n    const data1 = [20, 18, 15, 20, 12, 15, 10];\n    const data2 = [30, 20, 20, 25, 20, 15, 10];\n    const data3 = [35, 32, 40, 50, 30, 25, 15];\n    const data4 = [15, 25, 20, 18, 10, 15, 25];\n\n    const emphasisStyle = {\n      itemStyle: {\n        shadowColor: utils.rgbaColor(utils.getColor('dark'), 0.3)\n      }\n    };\n\n    const getDefaultOptions = () => ({\n      color: [\n        utils.getColor('primary'),\n        utils.getColor('info'),\n        utils.isDark() === 'dark' ? '#229BD2' : '#73D3FE',\n        utils.isDark() === 'dark' ? '#195979' : '#A9E4FF'\n      ],\n      tooltip: {\n        trigger: 'item',\n        padding: [7, 10],\n        backgroundColor: utils.getGrays()['100'],\n        borderColor: utils.getGrays()['300'],\n        textStyle: { color: utils.getGrays()['900'] },\n        borderWidth: 1,\n        transitionDuration: 0,\n        axisPointer: {\n          type: 'none'\n        }\n      },\n      legend: {\n        data: ['Urgent', 'High', 'Medium', 'Low'],\n        textStyle: {\n          color: utils.getGrays()['700']\n        }\n      },\n      xAxis: {\n        data: xAxisData,\n        splitLine: { show: false },\n        splitArea: { show: false },\n\n        axisLabel: {\n          color: utils.getGrays()['600'],\n          margin: 8\n        },\n\n        axisLine: {\n          lineStyle: {\n            color: utils.getGrays()['300'],\n            type: 'dashed'\n          }\n        },\n        axisTick: {\n          show: false\n        }\n      },\n      yAxis: {\n        splitLine: {\n          lineStyle: {\n            color: utils.getGrays()['300'],\n            type: 'dashed'\n          }\n        },\n        axisLabel: {\n          color: utils.getGrays()['600']\n        },\n        position: 'right'\n      },\n      series: [\n        {\n          name: 'Urgent',\n          type: 'bar',\n          stack: 'one',\n          emphasis: emphasisStyle,\n          data: data1\n        },\n        {\n          name: 'High',\n          type: 'bar',\n          stack: 'one',\n          emphasis: emphasisStyle,\n          data: data2\n        },\n        {\n          name: 'Medium',\n          type: 'bar',\n          stack: 'one',\n          emphasis: emphasisStyle,\n          data: data3\n        },\n        {\n          name: 'Low',\n          type: 'bar',\n          stack: 'one',\n          emphasis: emphasisStyle,\n          data: data4,\n          itemStyle: {\n            borderRadius: [2, 2, 0, 0]\n          }\n        }\n      ],\n\n      barWidth: '15px',\n      grid: {\n        top: '8%',\n        bottom: 10,\n        left: 0,\n        right: 2,\n        containLabel: true\n      }\n    });\n\n    echartSetOption(chart, userOptions, getDefaultOptions);\n  }\n};\n\nexport default echartsStackedVerticalChartInit;\n","import utils from '../../../utils';\nimport { getPosition, echartSetOption, tooltipFormatter } from '../echarts-utils';\n\n/* -------------------------------------------------------------------------- */\n/*                             Echarts Step Line Chart                        */\n/* -------------------------------------------------------------------------- */\n\nconst echartsStepLineChartInit = () => {\n  const $stepLineChartEl = document.querySelector('.echart-step-line-chart-example');\n\n  if ($stepLineChartEl) {\n    // Get options from data attribute\n    const userOptions = utils.getData($stepLineChartEl, 'options');\n    const chart = window.echarts.init($stepLineChartEl);\n\n    const days = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday'];\n\n    const getDefaultOptions = () => ({\n      color: [utils.getColor('danger'), utils.getColor('warning'), utils.getColor('primary')],\n\n      tooltip: {\n        trigger: 'axis',\n        padding: [7, 10],\n        backgroundColor: utils.getGrays()['100'],\n        borderColor: utils.getGrays()['300'],\n        textStyle: { color: utils.getGrays()['1100'] },\n        borderWidth: 1,\n        transitionDuration: 0,\n        formatter: tooltipFormatter,\n        position(pos, params, dom, rect, size) {\n          return getPosition(pos, params, dom, rect, size);\n        }\n      },\n      xAxis: {\n        type: 'category',\n        data: days,\n        boundaryGap: false,\n        axisLine: {\n          lineStyle: {\n            color: utils.getGrays()['300'],\n            type: 'solid'\n          }\n        },\n        axisTick: { show: false },\n        axisLabel: {\n          formatter: value => value.substring(0, 3),\n          color: utils.getGrays()['400'],\n          margin: 15\n        },\n        splitLine: {\n          show: false\n        },\n        axisPointer: {\n          lineStyle: {\n            color: utils.getGrays()['300']\n          }\n        }\n      },\n      yAxis: {\n        type: 'value',\n        splitLine: {\n          lineStyle: {\n            color: utils.getGrays()['200']\n          }\n        },\n        boundaryGap: false,\n        axisLabel: {\n          show: true,\n          color: utils.getGrays()['400'],\n          margin: 15\n        },\n        axisTick: { show: false },\n        axisLine: { show: false }\n      },\n      series: [\n        {\n          name: 'Step Start',\n          type: 'line',\n          step: 'start',\n          symbolSize: 10,\n          itemStyle: {\n            color: utils.getGrays()['100'],\n            borderColor: utils.getColor('primary'),\n            borderWidth: 2\n          },\n          lineStyle: {\n            color: utils.getColor('primary')\n          },\n          symbol: 'circle',\n          data: [120, 132, 101, 134, 90, 230, 210]\n        },\n        {\n          name: 'Step Middle',\n          type: 'line',\n          step: 'middle',\n          symbolSize: 10,\n          itemStyle: {\n            color: utils.getGrays()['100'],\n            borderColor: utils.getColor('warning'),\n            borderWidth: 2\n          },\n          lineStyle: {\n            color: utils.getColor('warning')\n          },\n          symbol: 'circle',\n          data: [220, 282, 201, 234, 290, 430, 410]\n        },\n        {\n          name: 'Step End',\n          type: 'line',\n          step: 'end',\n          symbolSize: 10,\n          itemStyle: {\n            color: utils.getGrays()['100'],\n            borderColor: utils.getColor('danger'),\n            borderWidth: 2\n          },\n          lineStyle: {\n            color: utils.getColor('danger')\n          },\n          symbol: 'circle',\n          data: [450, 432, 401, 454, 590, 530, 510]\n        }\n      ],\n      grid: { right: '3%', left: '8%', bottom: '10%', top: '5%' }\n    });\n\n    echartSetOption(chart, userOptions, getDefaultOptions);\n  }\n};\n\nexport default echartsStepLineChartInit;\n","import { docReady } from './utils';\nimport echartsLineChartInit from './charts/echarts/examples/basic-line-chart';\nimport echartsPieChartInit from './charts/echarts/examples/pie-chart';\nimport echartsBasicBarChartInit from './charts/echarts/examples/basic-bar-chart';\nimport echartsDoughnutChartInit from './charts/echarts/examples/doughnut-chart';\nimport echartsLineAreaChartInit from './charts/echarts/examples/line-area-chart';\nimport echartsStackedLineChartInit from './charts/echarts/examples/stacked-line-chart';\nimport echartsStackedAreaChartInit from './charts/echarts/examples/stacked-area-chart';\nimport echartsLineMarkerChartInit from './charts/echarts/examples/line-marker-chart';\nimport echartsAreaPiecesChartInit from './charts/echarts/examples/area-pieces-chart';\nimport echartsLineRaceChartInit from './charts/echarts/examples/line-race-chart';\nimport echartsStepLineChartInit from './charts/echarts/examples/step-line-chart';\nimport echartsLineGradientChartInit from './charts/echarts/examples/line-gradient-chart';\nimport echartsDynamicLineChartInit from './charts/echarts/examples/dynamic-line-chart';\nimport echartsHorizontalBarChartInit from './charts/echarts/examples/horizontal-bar-chart';\nimport echartsBarNegativeChartInit from './charts/echarts/examples/bar-negative-chart';\nimport echartsBarSeriesChartInit from './charts/echarts/examples/bar-series-chart';\nimport echartsWaterFallChartInit from './charts/echarts/examples/bar-waterfall-chart';\nimport echartsHorizontalStackedChartInit from './charts/echarts/examples/stacked-horizontal-bar-chart';\nimport echartsBarRaceChartInit from './charts/echarts/examples/bar-race-chart';\nimport echartsGradientBarChartInit from './charts/echarts/examples/gradient-bar-chart';\nimport echartsBarLineChartInit from './charts/echarts/examples/bar-line-mixed-chart';\nimport echartsBasicCandlestickChartInit from './charts/echarts/examples/basic-candlestick-chart';\nimport echartsCandlestickMixedChartInit from './charts/echarts/examples/candle-stick-mixed-chart';\nimport echartsUsaMapInit from './charts/echarts/examples/map-usa';\nimport echartsScatterBasicChartInit from './charts/echarts/examples/scatter-basic-chart';\nimport echartsBubbleChartInit from './charts/echarts/examples/bubble-chart';\nimport echartsScatterQuartetChartInit from './charts/echarts/examples/scatter-quartet';\nimport echartsScatterSingleAxisChartInit from './charts/echarts/examples/scatter-single-axis-chart';\nimport echartsBasicGaugeChartInit from './charts/echarts/examples/basic-gauge-chart';\nimport echartsGaugeProgressChartInit from './charts/echarts/examples/gauge-progress-chart';\nimport echartsGaugeRingChartInit from './charts/echarts/examples/gauge-ring-chart';\nimport echartsGaugeMultiRingChartInit from './charts/echarts/examples/gauge-multi-ring-chart';\nimport echartsGaugeMultiTitleChartInit from './charts/echarts/examples/gauge-multi-title-chart';\nimport echartsGaugeGradeChartInit from './charts/echarts/examples/gauge-grade-chart';\nimport echartsLineLogChartInit from './charts/echarts/examples/line-log-chart';\nimport echartsLineShareDatasetChartInit from './charts/echarts/examples/line-share-dataset-chart';\nimport echartsBarTimelineChartInit from './charts/echarts/examples/bar-timeline-chart';\nimport echartsDoughnutRoundedChartInit from './charts/echarts/examples/doughnut-rounded-chart';\nimport echartsPieLabelAlignChartInit from './charts/echarts/examples/pie-label-align-chart';\nimport echartsRadarChartInit from './charts/echarts/examples/radar-chart';\nimport echartsRadarCustomizedChartInit from './charts/echarts/examples/radar-customized-chart';\nimport echartsRadarMultipleChartInit from './charts/echarts/examples/radar-multiple-chart';\nimport echartsPieMultipleChartInit from './charts/echarts/examples/pie-multiple-chart';\nimport echartsHeatMapChartInit from './charts/echarts/examples/heatmap-chart';\nimport echartsHeatMapSingleSeriesChartInit from './charts/echarts/examples/heatmap-single-series-chart';\nimport echartsBarStackedChartInit from './charts/echarts/examples/bar-stacked-chart';\nimport echartsPieEdgeAlignChartInit from './charts/echarts/examples/pie-edge-align-chart';\nimport echartsStackedVerticalChartInit from './charts/echarts/examples/stacked-vertical-chart';\nimport echartsNestedPiesChartInit from './charts/echarts/examples/nested-pies-chart';\n\n/* -------------------------------------------------------------------------- */\n/*                            Theme Initialization                            */\n/* -------------------------------------------------------------------------- */\ndocReady(echartsLineChartInit);\ndocReady(echartsLineAreaChartInit);\ndocReady(echartsPieChartInit);\ndocReady(echartsBasicBarChartInit);\ndocReady(echartsDoughnutChartInit);\ndocReady(echartsStackedLineChartInit);\ndocReady(echartsStackedAreaChartInit);\ndocReady(echartsLineMarkerChartInit);\ndocReady(echartsAreaPiecesChartInit);\ndocReady(echartsLineRaceChartInit);\ndocReady(echartsStepLineChartInit);\ndocReady(echartsLineGradientChartInit);\ndocReady(echartsDynamicLineChartInit);\ndocReady(echartsHorizontalBarChartInit);\ndocReady(echartsBarNegativeChartInit);\ndocReady(echartsBarSeriesChartInit);\ndocReady(echartsWaterFallChartInit);\ndocReady(echartsHorizontalStackedChartInit);\ndocReady(echartsBarRaceChartInit);\ndocReady(echartsGradientBarChartInit);\ndocReady(echartsBarLineChartInit);\ndocReady(echartsBasicCandlestickChartInit);\ndocReady(echartsCandlestickMixedChartInit);\ndocReady(echartsUsaMapInit);\ndocReady(echartsScatterBasicChartInit);\ndocReady(echartsBubbleChartInit);\ndocReady(echartsScatterQuartetChartInit);\ndocReady(echartsScatterSingleAxisChartInit);\ndocReady(echartsBasicGaugeChartInit);\ndocReady(echartsGaugeProgressChartInit);\ndocReady(echartsGaugeRingChartInit);\ndocReady(echartsGaugeMultiRingChartInit);\ndocReady(echartsGaugeMultiTitleChartInit);\ndocReady(echartsGaugeGradeChartInit);\ndocReady(echartsLineLogChartInit);\ndocReady(echartsLineShareDatasetChartInit);\ndocReady(echartsBarTimelineChartInit);\ndocReady(echartsDoughnutRoundedChartInit);\ndocReady(echartsPieLabelAlignChartInit);\ndocReady(echartsRadarChartInit);\ndocReady(echartsRadarCustomizedChartInit);\ndocReady(echartsRadarMultipleChartInit);\ndocReady(echartsPieMultipleChartInit);\ndocReady(echartsHeatMapChartInit);\ndocReady(echartsHeatMapSingleSeriesChartInit);\ndocReady(echartsBarStackedChartInit);\ndocReady(echartsPieEdgeAlignChartInit);\ndocReady(echartsStackedVerticalChartInit);\ndocReady(echartsNestedPiesChartInit);\n"]}